import { Any } from "./typesV2/google/protobuf/any";
import { IBinaryReader, IBinaryWriter } from "./binary";
export type ProtoMsg = Omit<Any, "typeUrl"> & {
    typeUrl: any;
};
export interface IAminoMsg<Amino> {
    type: any;
    value: Amino;
}
export interface IProtoType {
    $typeUrl?: any;
}
export interface TelescopeGeneratedCodec<T = unknown, SDK = unknown, Amino = unknown> {
    readonly typeUrl: string;
    readonly aminoType?: string;
    is?(o: unknown): o is T;
    isSDK?(o: unknown): o is SDK;
    isAmino?(o: unknown): o is Amino;
    encode: (message: T, writer?: IBinaryWriter | any) => IBinaryWriter | any;
    decode: (input: IBinaryReader | Uint8Array | any, length?: number) => T;
    fromPartial: (object: any) => T | any;
    fromJSON?: (object: any) => T | any;
    toJSON?: (message: T | any) => any;
    fromSDK?: (sdk: SDK) => T;
    fromSDKJSON?: (object: any) => SDK;
    toSDK?: (message: T) => SDK;
    fromAmino?: (amino: Amino) => T;
    toAmino?: (message: T) => Amino;
    fromAminoMsg?: (aminoMsg: IAminoMsg<Amino>) => T;
    toAminoMsg?: (message: T) => IAminoMsg<Amino>;
    toProto?: (message: T) => Uint8Array;
    fromProtoMsg?: (message: ProtoMsg) => T;
    toProtoMsg?: (message: T) => Any;
}
