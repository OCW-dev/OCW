import { BinaryReader, BinaryWriter } from "../../../binary";
export interface Any {
    $typeUrl?: "/google.protobuf.Any" | string;
    typeUrl: string;
    value: Uint8Array;
}
export interface AnyProtoMsg {
    typeUrl: "/google.protobuf.Any";
    value: Uint8Array;
}
export interface AnyAmino {
    type: string;
    value: any;
}
export interface AnyAminoMsg {
    type: string;
    value: AnyAmino;
}
export interface AnySDKType {
    $typeUrl?: "/google.protobuf.Any" | string;
    type_url: string;
    value: Uint8Array;
}
export declare const Any: {
    typeUrl: string;
    is(o: any): o is Any;
    isSDK(o: any): o is AnySDKType;
    isAmino(o: any): o is AnyAmino;
    encode(message: Any, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Any;
    fromPartial(object: Partial<Any>): Any;
    fromAmino(object: AnyAmino): Any;
    toAmino(message: Any): AnyAmino;
    fromAminoMsg(object: AnyAminoMsg): Any;
    fromProtoMsg(message: AnyProtoMsg): Any;
    toProto(message: Any): Uint8Array;
    toProtoMsg(message: Any): AnyProtoMsg;
};
