import { BinaryReader, BinaryWriter } from "../../../binary";
export interface Duration {
    seconds: bigint;
    nanos: number;
}
export interface DurationProtoMsg {
    typeUrl: "/google.protobuf.Duration";
    value: Uint8Array;
}
export type DurationAmino = string;
export interface DurationAminoMsg {
    type: "/google.protobuf.Duration";
    value: DurationAmino;
}
export interface DurationSDKType {
    seconds: bigint;
    nanos: number;
}
export declare const Duration: {
    typeUrl: string;
    is(o: any): o is Duration;
    isSDK(o: any): o is DurationSDKType;
    isAmino(o: any): o is string;
    encode(message: Duration, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Duration;
    fromPartial(object: Partial<Duration>): Duration;
    fromAmino(object: DurationAmino): Duration;
    toAmino(message: Duration): DurationAmino;
    fromAminoMsg(object: DurationAminoMsg): Duration;
    fromProtoMsg(message: DurationProtoMsg): Duration;
    toProto(message: Duration): Uint8Array;
    toProtoMsg(message: Duration): DurationProtoMsg;
};
