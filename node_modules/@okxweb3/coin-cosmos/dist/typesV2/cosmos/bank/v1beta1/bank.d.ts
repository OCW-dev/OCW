import { Coin, CoinAmino, CoinSDKType } from "../../base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../../../binary";
export interface Params {
    sendEnabled: SendEnabled[];
    defaultSendEnabled: boolean;
}
export interface ParamsProtoMsg {
    typeUrl: "/cosmos.bank.v1beta1.Params";
    value: Uint8Array;
}
export interface ParamsAmino {
    send_enabled?: SendEnabledAmino[];
    default_send_enabled?: boolean;
}
export interface ParamsAminoMsg {
    type: "cosmos-sdk/x/bank/Params";
    value: ParamsAmino;
}
export interface ParamsSDKType {
    send_enabled: SendEnabledSDKType[];
    default_send_enabled: boolean;
}
export interface SendEnabled {
    denom: string;
    enabled: boolean;
}
export interface SendEnabledProtoMsg {
    typeUrl: "/cosmos.bank.v1beta1.SendEnabled";
    value: Uint8Array;
}
export interface SendEnabledAmino {
    denom?: string;
    enabled?: boolean;
}
export interface SendEnabledAminoMsg {
    type: "cosmos-sdk/SendEnabled";
    value: SendEnabledAmino;
}
export interface SendEnabledSDKType {
    denom: string;
    enabled: boolean;
}
export interface Input {
    address: string;
    coins: Coin[];
}
export interface InputProtoMsg {
    typeUrl: "/cosmos.bank.v1beta1.Input";
    value: Uint8Array;
}
export interface InputAmino {
    address?: string;
    coins: CoinAmino[];
}
export interface InputAminoMsg {
    type: "cosmos-sdk/Input";
    value: InputAmino;
}
export interface InputSDKType {
    address: string;
    coins: CoinSDKType[];
}
export interface Output {
    address: string;
    coins: Coin[];
}
export interface OutputProtoMsg {
    typeUrl: "/cosmos.bank.v1beta1.Output";
    value: Uint8Array;
}
export interface OutputAmino {
    address?: string;
    coins: CoinAmino[];
}
export interface OutputAminoMsg {
    type: "cosmos-sdk/Output";
    value: OutputAmino;
}
export interface OutputSDKType {
    address: string;
    coins: CoinSDKType[];
}
export interface Supply {
    $typeUrl?: "/cosmos.bank.v1beta1.Supply";
    total: Coin[];
}
export interface SupplyProtoMsg {
    typeUrl: "/cosmos.bank.v1beta1.Supply";
    value: Uint8Array;
}
export interface SupplyAmino {
    total: CoinAmino[];
}
export interface SupplyAminoMsg {
    type: "cosmos-sdk/Supply";
    value: SupplyAmino;
}
export interface SupplySDKType {
    $typeUrl?: "/cosmos.bank.v1beta1.Supply";
    total: CoinSDKType[];
}
export interface DenomUnit {
    denom: string;
    exponent: number;
    aliases: string[];
}
export interface DenomUnitProtoMsg {
    typeUrl: "/cosmos.bank.v1beta1.DenomUnit";
    value: Uint8Array;
}
export interface DenomUnitAmino {
    denom?: string;
    exponent?: number;
    aliases?: string[];
}
export interface DenomUnitAminoMsg {
    type: "cosmos-sdk/DenomUnit";
    value: DenomUnitAmino;
}
export interface DenomUnitSDKType {
    denom: string;
    exponent: number;
    aliases: string[];
}
export interface Metadata {
    description: string;
    denomUnits: DenomUnit[];
    base: string;
    display: string;
    name: string;
    symbol: string;
    uri: string;
    uriHash: string;
}
export interface MetadataProtoMsg {
    typeUrl: "/cosmos.bank.v1beta1.Metadata";
    value: Uint8Array;
}
export interface MetadataAmino {
    description?: string;
    denom_units?: DenomUnitAmino[];
    base?: string;
    display?: string;
    name?: string;
    symbol?: string;
    uri?: string;
    uri_hash?: string;
}
export interface MetadataAminoMsg {
    type: "cosmos-sdk/Metadata";
    value: MetadataAmino;
}
export interface MetadataSDKType {
    description: string;
    denom_units: DenomUnitSDKType[];
    base: string;
    display: string;
    name: string;
    symbol: string;
    uri: string;
    uri_hash: string;
}
export declare const Params: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is Params;
    isSDK(o: any): o is ParamsSDKType;
    isAmino(o: any): o is ParamsAmino;
    encode(message: Params, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Params;
    fromPartial(object: Partial<Params>): Params;
    fromAmino(object: ParamsAmino): Params;
    toAmino(message: Params): ParamsAmino;
    fromAminoMsg(object: ParamsAminoMsg): Params;
    toAminoMsg(message: Params): ParamsAminoMsg;
    fromProtoMsg(message: ParamsProtoMsg): Params;
    toProto(message: Params): Uint8Array;
    toProtoMsg(message: Params): ParamsProtoMsg;
};
export declare const SendEnabled: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is SendEnabled;
    isSDK(o: any): o is SendEnabledSDKType;
    isAmino(o: any): o is SendEnabledAmino;
    encode(message: SendEnabled, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): SendEnabled;
    fromPartial(object: Partial<SendEnabled>): SendEnabled;
    fromAmino(object: SendEnabledAmino): SendEnabled;
    toAmino(message: SendEnabled): SendEnabledAmino;
    fromAminoMsg(object: SendEnabledAminoMsg): SendEnabled;
    toAminoMsg(message: SendEnabled): SendEnabledAminoMsg;
    fromProtoMsg(message: SendEnabledProtoMsg): SendEnabled;
    toProto(message: SendEnabled): Uint8Array;
    toProtoMsg(message: SendEnabled): SendEnabledProtoMsg;
};
export declare const Input: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is Input;
    isSDK(o: any): o is InputSDKType;
    isAmino(o: any): o is InputAmino;
    encode(message: Input, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Input;
    fromPartial(object: Partial<Input>): Input;
    fromAmino(object: InputAmino): Input;
    toAmino(message: Input): InputAmino;
    fromAminoMsg(object: InputAminoMsg): Input;
    toAminoMsg(message: Input): InputAminoMsg;
    fromProtoMsg(message: InputProtoMsg): Input;
    toProto(message: Input): Uint8Array;
    toProtoMsg(message: Input): InputProtoMsg;
};
export declare const Output: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is Output;
    isSDK(o: any): o is OutputSDKType;
    isAmino(o: any): o is OutputAmino;
    encode(message: Output, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Output;
    fromPartial(object: Partial<Output>): Output;
    fromAmino(object: OutputAmino): Output;
    toAmino(message: Output): OutputAmino;
    fromAminoMsg(object: OutputAminoMsg): Output;
    toAminoMsg(message: Output): OutputAminoMsg;
    fromProtoMsg(message: OutputProtoMsg): Output;
    toProto(message: Output): Uint8Array;
    toProtoMsg(message: Output): OutputProtoMsg;
};
export declare const Supply: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is Supply;
    isSDK(o: any): o is SupplySDKType;
    isAmino(o: any): o is SupplyAmino;
    encode(message: Supply, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Supply;
    fromPartial(object: Partial<Supply>): Supply;
    fromAmino(object: SupplyAmino): Supply;
    toAmino(message: Supply): SupplyAmino;
    fromAminoMsg(object: SupplyAminoMsg): Supply;
    toAminoMsg(message: Supply): SupplyAminoMsg;
    fromProtoMsg(message: SupplyProtoMsg): Supply;
    toProto(message: Supply): Uint8Array;
    toProtoMsg(message: Supply): SupplyProtoMsg;
};
export declare const DenomUnit: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is DenomUnit;
    isSDK(o: any): o is DenomUnitSDKType;
    isAmino(o: any): o is DenomUnitAmino;
    encode(message: DenomUnit, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): DenomUnit;
    fromPartial(object: Partial<DenomUnit>): DenomUnit;
    fromAmino(object: DenomUnitAmino): DenomUnit;
    toAmino(message: DenomUnit): DenomUnitAmino;
    fromAminoMsg(object: DenomUnitAminoMsg): DenomUnit;
    toAminoMsg(message: DenomUnit): DenomUnitAminoMsg;
    fromProtoMsg(message: DenomUnitProtoMsg): DenomUnit;
    toProto(message: DenomUnit): Uint8Array;
    toProtoMsg(message: DenomUnit): DenomUnitProtoMsg;
};
export declare const Metadata: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is Metadata;
    isSDK(o: any): o is MetadataSDKType;
    isAmino(o: any): o is MetadataAmino;
    encode(message: Metadata, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Metadata;
    fromPartial(object: Partial<Metadata>): Metadata;
    fromAmino(object: MetadataAmino): Metadata;
    toAmino(message: Metadata): MetadataAmino;
    fromAminoMsg(object: MetadataAminoMsg): Metadata;
    toAminoMsg(message: Metadata): MetadataAminoMsg;
    fromProtoMsg(message: MetadataProtoMsg): Metadata;
    toProto(message: Metadata): Uint8Array;
    toProtoMsg(message: Metadata): MetadataProtoMsg;
};
