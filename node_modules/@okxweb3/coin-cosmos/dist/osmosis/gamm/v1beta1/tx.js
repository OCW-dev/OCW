"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgExitSwapExternAmountOutResponse = exports.MsgExitSwapExternAmountOut = exports.MsgExitSwapShareAmountInResponse = exports.MsgExitSwapShareAmountIn = exports.MsgJoinSwapShareAmountOutResponse = exports.MsgJoinSwapShareAmountOut = exports.MsgJoinSwapExternAmountInResponse = exports.MsgJoinSwapExternAmountIn = exports.MsgSwapExactAmountOutResponse = exports.MsgSwapExactAmountOut = exports.SwapAmountOutRoute = exports.MsgSwapExactAmountInResponse = exports.MsgSwapExactAmountIn = exports.SwapAmountInRoute = exports.MsgExitPoolResponse = exports.MsgExitPool = exports.MsgJoinPoolResponse = exports.MsgJoinPool = void 0;
const crypto_lib_1 = require("@okxweb3/crypto-lib");
const coin_1 = require("../../../types/cosmos/base/v1beta1/coin");
const tx_1 = require("../../../types/cosmos/tx/v1beta1/tx");
function createBaseMsgJoinPool() {
    return {
        sender: "",
        poolId: crypto_lib_1.Long.UZERO,
        shareOutAmount: "",
        tokenInMaxs: []
    };
}
exports.MsgJoinPool = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (!message.poolId.isZero()) {
            writer.uint32(16).uint64(message.poolId);
        }
        if (message.shareOutAmount !== "") {
            writer.uint32(26).string(message.shareOutAmount);
        }
        for (const v of message.tokenInMaxs) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgJoinPool();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.poolId = reader.uint64();
                    break;
                case 3:
                    message.shareOutAmount = reader.string();
                    break;
                case 4:
                    message.tokenInMaxs.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            shareOutAmount: (0, tx_1.isSet)(object.shareOutAmount) ? String(object.shareOutAmount) : "",
            tokenInMaxs: Array.isArray(object?.tokenInMaxs) ? object.tokenInMaxs.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.shareOutAmount !== undefined && (obj.shareOutAmount = message.shareOutAmount);
        if (message.tokenInMaxs) {
            obj.tokenInMaxs = message.tokenInMaxs.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.tokenInMaxs = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgJoinPool();
        message.sender = object.sender ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.shareOutAmount = object.shareOutAmount ?? "";
        message.tokenInMaxs = object.tokenInMaxs?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    }
};
function createBaseMsgJoinPoolResponse() {
    return {};
}
exports.MsgJoinPoolResponse = {
    encode(_, writer = crypto_lib_1._m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgJoinPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgJoinPoolResponse();
        return message;
    }
};
function createBaseMsgExitPool() {
    return {
        sender: "",
        poolId: crypto_lib_1.Long.UZERO,
        shareInAmount: "",
        tokenOutMins: []
    };
}
exports.MsgExitPool = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (!message.poolId.isZero()) {
            writer.uint32(16).uint64(message.poolId);
        }
        if (message.shareInAmount !== "") {
            writer.uint32(26).string(message.shareInAmount);
        }
        for (const v of message.tokenOutMins) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExitPool();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.poolId = reader.uint64();
                    break;
                case 3:
                    message.shareInAmount = reader.string();
                    break;
                case 4:
                    message.tokenOutMins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            shareInAmount: (0, tx_1.isSet)(object.shareInAmount) ? String(object.shareInAmount) : "",
            tokenOutMins: Array.isArray(object?.tokenOutMins) ? object.tokenOutMins.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.shareInAmount !== undefined && (obj.shareInAmount = message.shareInAmount);
        if (message.tokenOutMins) {
            obj.tokenOutMins = message.tokenOutMins.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.tokenOutMins = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgExitPool();
        message.sender = object.sender ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.shareInAmount = object.shareInAmount ?? "";
        message.tokenOutMins = object.tokenOutMins?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    }
};
function createBaseMsgExitPoolResponse() {
    return {};
}
exports.MsgExitPoolResponse = {
    encode(_, writer = crypto_lib_1._m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExitPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgExitPoolResponse();
        return message;
    }
};
function createBaseSwapAmountInRoute() {
    return {
        poolId: crypto_lib_1.Long.UZERO,
        tokenOutDenom: ""
    };
}
exports.SwapAmountInRoute = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (!message.poolId.isZero()) {
            writer.uint32(8).uint64(message.poolId);
        }
        if (message.tokenOutDenom !== "") {
            writer.uint32(18).string(message.tokenOutDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapAmountInRoute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolId = reader.uint64();
                    break;
                case 2:
                    message.tokenOutDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            tokenOutDenom: (0, tx_1.isSet)(object.tokenOutDenom) ? String(object.tokenOutDenom) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.tokenOutDenom !== undefined && (obj.tokenOutDenom = message.tokenOutDenom);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSwapAmountInRoute();
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.tokenOutDenom = object.tokenOutDenom ?? "";
        return message;
    }
};
function createBaseMsgSwapExactAmountIn() {
    return {
        sender: "",
        routes: [],
        tokenIn: undefined,
        tokenOutMinAmount: ""
    };
}
exports.MsgSwapExactAmountIn = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.routes) {
            exports.SwapAmountInRoute.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenIn !== undefined) {
            coin_1.Coin.encode(message.tokenIn, writer.uint32(26).fork()).ldelim();
        }
        if (message.tokenOutMinAmount !== "") {
            writer.uint32(34).string(message.tokenOutMinAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapExactAmountIn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.routes.push(exports.SwapAmountInRoute.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.tokenIn = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.tokenOutMinAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            routes: Array.isArray(object?.routes) ? object.routes.map((e) => exports.SwapAmountInRoute.fromJSON(e)) : [],
            tokenIn: (0, tx_1.isSet)(object.tokenIn) ? coin_1.Coin.fromJSON(object.tokenIn) : undefined,
            tokenOutMinAmount: (0, tx_1.isSet)(object.tokenOutMinAmount) ? String(object.tokenOutMinAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        if (message.routes) {
            obj.routes = message.routes.map(e => e ? exports.SwapAmountInRoute.toJSON(e) : undefined);
        }
        else {
            obj.routes = [];
        }
        message.tokenIn !== undefined && (obj.tokenIn = message.tokenIn ? coin_1.Coin.toJSON(message.tokenIn) : undefined);
        message.tokenOutMinAmount !== undefined && (obj.tokenOutMinAmount = message.tokenOutMinAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSwapExactAmountIn();
        message.sender = object.sender ?? "";
        message.routes = object.routes?.map(e => exports.SwapAmountInRoute.fromPartial(e)) || [];
        message.tokenIn = object.tokenIn !== undefined && object.tokenIn !== null ? coin_1.Coin.fromPartial(object.tokenIn) : undefined;
        message.tokenOutMinAmount = object.tokenOutMinAmount ?? "";
        return message;
    }
};
function createBaseMsgSwapExactAmountInResponse() {
    return {
        tokenOutAmount: ""
    };
}
exports.MsgSwapExactAmountInResponse = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.tokenOutAmount !== "") {
            writer.uint32(10).string(message.tokenOutAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapExactAmountInResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenOutAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenOutAmount: (0, tx_1.isSet)(object.tokenOutAmount) ? String(object.tokenOutAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.tokenOutAmount !== undefined && (obj.tokenOutAmount = message.tokenOutAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSwapExactAmountInResponse();
        message.tokenOutAmount = object.tokenOutAmount ?? "";
        return message;
    }
};
function createBaseSwapAmountOutRoute() {
    return {
        poolId: crypto_lib_1.Long.UZERO,
        tokenInDenom: ""
    };
}
exports.SwapAmountOutRoute = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (!message.poolId.isZero()) {
            writer.uint32(8).uint64(message.poolId);
        }
        if (message.tokenInDenom !== "") {
            writer.uint32(18).string(message.tokenInDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapAmountOutRoute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolId = reader.uint64();
                    break;
                case 2:
                    message.tokenInDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            tokenInDenom: (0, tx_1.isSet)(object.tokenInDenom) ? String(object.tokenInDenom) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.tokenInDenom !== undefined && (obj.tokenInDenom = message.tokenInDenom);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSwapAmountOutRoute();
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.tokenInDenom = object.tokenInDenom ?? "";
        return message;
    }
};
function createBaseMsgSwapExactAmountOut() {
    return {
        sender: "",
        routes: [],
        tokenInMaxAmount: "",
        tokenOut: undefined
    };
}
exports.MsgSwapExactAmountOut = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.routes) {
            exports.SwapAmountOutRoute.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenInMaxAmount !== "") {
            writer.uint32(26).string(message.tokenInMaxAmount);
        }
        if (message.tokenOut !== undefined) {
            coin_1.Coin.encode(message.tokenOut, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapExactAmountOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.routes.push(exports.SwapAmountOutRoute.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.tokenInMaxAmount = reader.string();
                    break;
                case 4:
                    message.tokenOut = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            routes: Array.isArray(object?.routes) ? object.routes.map((e) => exports.SwapAmountOutRoute.fromJSON(e)) : [],
            tokenInMaxAmount: (0, tx_1.isSet)(object.tokenInMaxAmount) ? String(object.tokenInMaxAmount) : "",
            tokenOut: (0, tx_1.isSet)(object.tokenOut) ? coin_1.Coin.fromJSON(object.tokenOut) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        if (message.routes) {
            obj.routes = message.routes.map(e => e ? exports.SwapAmountOutRoute.toJSON(e) : undefined);
        }
        else {
            obj.routes = [];
        }
        message.tokenInMaxAmount !== undefined && (obj.tokenInMaxAmount = message.tokenInMaxAmount);
        message.tokenOut !== undefined && (obj.tokenOut = message.tokenOut ? coin_1.Coin.toJSON(message.tokenOut) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSwapExactAmountOut();
        message.sender = object.sender ?? "";
        message.routes = object.routes?.map(e => exports.SwapAmountOutRoute.fromPartial(e)) || [];
        message.tokenInMaxAmount = object.tokenInMaxAmount ?? "";
        message.tokenOut = object.tokenOut !== undefined && object.tokenOut !== null ? coin_1.Coin.fromPartial(object.tokenOut) : undefined;
        return message;
    }
};
function createBaseMsgSwapExactAmountOutResponse() {
    return {
        tokenInAmount: ""
    };
}
exports.MsgSwapExactAmountOutResponse = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.tokenInAmount !== "") {
            writer.uint32(10).string(message.tokenInAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapExactAmountOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenInAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenInAmount: (0, tx_1.isSet)(object.tokenInAmount) ? String(object.tokenInAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.tokenInAmount !== undefined && (obj.tokenInAmount = message.tokenInAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSwapExactAmountOutResponse();
        message.tokenInAmount = object.tokenInAmount ?? "";
        return message;
    }
};
function createBaseMsgJoinSwapExternAmountIn() {
    return {
        sender: "",
        poolId: crypto_lib_1.Long.UZERO,
        tokenIn: undefined,
        shareOutMinAmount: ""
    };
}
exports.MsgJoinSwapExternAmountIn = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (!message.poolId.isZero()) {
            writer.uint32(16).uint64(message.poolId);
        }
        if (message.tokenIn !== undefined) {
            coin_1.Coin.encode(message.tokenIn, writer.uint32(26).fork()).ldelim();
        }
        if (message.shareOutMinAmount !== "") {
            writer.uint32(34).string(message.shareOutMinAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgJoinSwapExternAmountIn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.poolId = reader.uint64();
                    break;
                case 3:
                    message.tokenIn = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shareOutMinAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            tokenIn: (0, tx_1.isSet)(object.tokenIn) ? coin_1.Coin.fromJSON(object.tokenIn) : undefined,
            shareOutMinAmount: (0, tx_1.isSet)(object.shareOutMinAmount) ? String(object.shareOutMinAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.tokenIn !== undefined && (obj.tokenIn = message.tokenIn ? coin_1.Coin.toJSON(message.tokenIn) : undefined);
        message.shareOutMinAmount !== undefined && (obj.shareOutMinAmount = message.shareOutMinAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgJoinSwapExternAmountIn();
        message.sender = object.sender ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.tokenIn = object.tokenIn !== undefined && object.tokenIn !== null ? coin_1.Coin.fromPartial(object.tokenIn) : undefined;
        message.shareOutMinAmount = object.shareOutMinAmount ?? "";
        return message;
    }
};
function createBaseMsgJoinSwapExternAmountInResponse() {
    return {
        shareOutAmount: ""
    };
}
exports.MsgJoinSwapExternAmountInResponse = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.shareOutAmount !== "") {
            writer.uint32(10).string(message.shareOutAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgJoinSwapExternAmountInResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.shareOutAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            shareOutAmount: (0, tx_1.isSet)(object.shareOutAmount) ? String(object.shareOutAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.shareOutAmount !== undefined && (obj.shareOutAmount = message.shareOutAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgJoinSwapExternAmountInResponse();
        message.shareOutAmount = object.shareOutAmount ?? "";
        return message;
    }
};
function createBaseMsgJoinSwapShareAmountOut() {
    return {
        sender: "",
        poolId: crypto_lib_1.Long.UZERO,
        tokenInDenom: "",
        shareOutAmount: "",
        tokenInMaxAmount: ""
    };
}
exports.MsgJoinSwapShareAmountOut = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (!message.poolId.isZero()) {
            writer.uint32(16).uint64(message.poolId);
        }
        if (message.tokenInDenom !== "") {
            writer.uint32(26).string(message.tokenInDenom);
        }
        if (message.shareOutAmount !== "") {
            writer.uint32(34).string(message.shareOutAmount);
        }
        if (message.tokenInMaxAmount !== "") {
            writer.uint32(42).string(message.tokenInMaxAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgJoinSwapShareAmountOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.poolId = reader.uint64();
                    break;
                case 3:
                    message.tokenInDenom = reader.string();
                    break;
                case 4:
                    message.shareOutAmount = reader.string();
                    break;
                case 5:
                    message.tokenInMaxAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            tokenInDenom: (0, tx_1.isSet)(object.tokenInDenom) ? String(object.tokenInDenom) : "",
            shareOutAmount: (0, tx_1.isSet)(object.shareOutAmount) ? String(object.shareOutAmount) : "",
            tokenInMaxAmount: (0, tx_1.isSet)(object.tokenInMaxAmount) ? String(object.tokenInMaxAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.tokenInDenom !== undefined && (obj.tokenInDenom = message.tokenInDenom);
        message.shareOutAmount !== undefined && (obj.shareOutAmount = message.shareOutAmount);
        message.tokenInMaxAmount !== undefined && (obj.tokenInMaxAmount = message.tokenInMaxAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgJoinSwapShareAmountOut();
        message.sender = object.sender ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.tokenInDenom = object.tokenInDenom ?? "";
        message.shareOutAmount = object.shareOutAmount ?? "";
        message.tokenInMaxAmount = object.tokenInMaxAmount ?? "";
        return message;
    }
};
function createBaseMsgJoinSwapShareAmountOutResponse() {
    return {
        tokenInAmount: ""
    };
}
exports.MsgJoinSwapShareAmountOutResponse = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.tokenInAmount !== "") {
            writer.uint32(10).string(message.tokenInAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgJoinSwapShareAmountOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenInAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenInAmount: (0, tx_1.isSet)(object.tokenInAmount) ? String(object.tokenInAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.tokenInAmount !== undefined && (obj.tokenInAmount = message.tokenInAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgJoinSwapShareAmountOutResponse();
        message.tokenInAmount = object.tokenInAmount ?? "";
        return message;
    }
};
function createBaseMsgExitSwapShareAmountIn() {
    return {
        sender: "",
        poolId: crypto_lib_1.Long.UZERO,
        tokenOutDenom: "",
        shareInAmount: "",
        tokenOutMinAmount: ""
    };
}
exports.MsgExitSwapShareAmountIn = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (!message.poolId.isZero()) {
            writer.uint32(16).uint64(message.poolId);
        }
        if (message.tokenOutDenom !== "") {
            writer.uint32(26).string(message.tokenOutDenom);
        }
        if (message.shareInAmount !== "") {
            writer.uint32(34).string(message.shareInAmount);
        }
        if (message.tokenOutMinAmount !== "") {
            writer.uint32(42).string(message.tokenOutMinAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExitSwapShareAmountIn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.poolId = reader.uint64();
                    break;
                case 3:
                    message.tokenOutDenom = reader.string();
                    break;
                case 4:
                    message.shareInAmount = reader.string();
                    break;
                case 5:
                    message.tokenOutMinAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            tokenOutDenom: (0, tx_1.isSet)(object.tokenOutDenom) ? String(object.tokenOutDenom) : "",
            shareInAmount: (0, tx_1.isSet)(object.shareInAmount) ? String(object.shareInAmount) : "",
            tokenOutMinAmount: (0, tx_1.isSet)(object.tokenOutMinAmount) ? String(object.tokenOutMinAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.tokenOutDenom !== undefined && (obj.tokenOutDenom = message.tokenOutDenom);
        message.shareInAmount !== undefined && (obj.shareInAmount = message.shareInAmount);
        message.tokenOutMinAmount !== undefined && (obj.tokenOutMinAmount = message.tokenOutMinAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgExitSwapShareAmountIn();
        message.sender = object.sender ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.tokenOutDenom = object.tokenOutDenom ?? "";
        message.shareInAmount = object.shareInAmount ?? "";
        message.tokenOutMinAmount = object.tokenOutMinAmount ?? "";
        return message;
    }
};
function createBaseMsgExitSwapShareAmountInResponse() {
    return {
        tokenOutAmount: ""
    };
}
exports.MsgExitSwapShareAmountInResponse = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.tokenOutAmount !== "") {
            writer.uint32(10).string(message.tokenOutAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExitSwapShareAmountInResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenOutAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenOutAmount: (0, tx_1.isSet)(object.tokenOutAmount) ? String(object.tokenOutAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.tokenOutAmount !== undefined && (obj.tokenOutAmount = message.tokenOutAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgExitSwapShareAmountInResponse();
        message.tokenOutAmount = object.tokenOutAmount ?? "";
        return message;
    }
};
function createBaseMsgExitSwapExternAmountOut() {
    return {
        sender: "",
        poolId: crypto_lib_1.Long.UZERO,
        tokenOut: undefined,
        shareInMaxAmount: ""
    };
}
exports.MsgExitSwapExternAmountOut = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (!message.poolId.isZero()) {
            writer.uint32(16).uint64(message.poolId);
        }
        if (message.tokenOut !== undefined) {
            coin_1.Coin.encode(message.tokenOut, writer.uint32(26).fork()).ldelim();
        }
        if (message.shareInMaxAmount !== "") {
            writer.uint32(34).string(message.shareInMaxAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExitSwapExternAmountOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.poolId = reader.uint64();
                    break;
                case 3:
                    message.tokenOut = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shareInMaxAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            poolId: (0, tx_1.isSet)(object.poolId) ? crypto_lib_1.Long.fromString(object.poolId) : crypto_lib_1.Long.UZERO,
            tokenOut: (0, tx_1.isSet)(object.tokenOut) ? coin_1.Coin.fromJSON(object.tokenOut) : undefined,
            shareInMaxAmount: (0, tx_1.isSet)(object.shareInMaxAmount) ? String(object.shareInMaxAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.poolId !== undefined && (obj.poolId = (message.poolId || crypto_lib_1.Long.UZERO).toString());
        message.tokenOut !== undefined && (obj.tokenOut = message.tokenOut ? coin_1.Coin.toJSON(message.tokenOut) : undefined);
        message.shareInMaxAmount !== undefined && (obj.shareInMaxAmount = message.shareInMaxAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgExitSwapExternAmountOut();
        message.sender = object.sender ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? crypto_lib_1.Long.fromValue(object.poolId) : crypto_lib_1.Long.UZERO;
        message.tokenOut = object.tokenOut !== undefined && object.tokenOut !== null ? coin_1.Coin.fromPartial(object.tokenOut) : undefined;
        message.shareInMaxAmount = object.shareInMaxAmount ?? "";
        return message;
    }
};
function createBaseMsgExitSwapExternAmountOutResponse() {
    return {
        shareInAmount: ""
    };
}
exports.MsgExitSwapExternAmountOutResponse = {
    encode(message, writer = crypto_lib_1._m0.Writer.create()) {
        if (message.shareInAmount !== "") {
            writer.uint32(10).string(message.shareInAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_1._m0.Reader ? input : new crypto_lib_1._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExitSwapExternAmountOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.shareInAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            shareInAmount: (0, tx_1.isSet)(object.shareInAmount) ? String(object.shareInAmount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.shareInAmount !== undefined && (obj.shareInAmount = message.shareInAmount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgExitSwapExternAmountOutResponse();
        message.shareInAmount = object.shareInAmount ?? "";
        return message;
    }
};
//# sourceMappingURL=tx.js.map