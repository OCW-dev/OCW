import { Duration, DurationAmino, DurationSDKType } from "../../typesV2/google/protobuf/duration";
import { Coin, CoinAmino, CoinSDKType } from "../../typesV2/cosmos/base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../binary";
export declare enum LockQueryType {
    ByDuration = 0,
    ByTime = 1,
    NoLock = 2,
    ByGroup = 3,
    UNRECOGNIZED = -1
}
export declare const LockQueryTypeSDKType: typeof LockQueryType;
export declare const LockQueryTypeAmino: typeof LockQueryType;
export declare function lockQueryTypeFromJSON(object: any): LockQueryType;
export declare function lockQueryTypeToJSON(object: LockQueryType): string;
export interface PeriodLock {
    ID: bigint;
    owner: string;
    duration: Duration;
    endTime: Date;
    coins: Coin[];
    rewardReceiverAddress: string;
}
export interface PeriodLockProtoMsg {
    typeUrl: "/osmosis.lockup.PeriodLock";
    value: Uint8Array;
}
export interface PeriodLockAmino {
    ID?: string;
    owner?: string;
    duration?: DurationAmino;
    end_time?: string;
    coins?: CoinAmino[];
    reward_receiver_address?: string;
}
export interface PeriodLockAminoMsg {
    type: "osmosis/lockup/period-lock";
    value: PeriodLockAmino;
}
export interface PeriodLockSDKType {
    ID: bigint;
    owner: string;
    duration: DurationSDKType;
    end_time: Date;
    coins: CoinSDKType[];
    reward_receiver_address: string;
}
export interface QueryCondition {
    lockQueryType: LockQueryType;
    denom: string;
    duration: Duration;
    timestamp: Date;
}
export interface QueryConditionProtoMsg {
    typeUrl: "/osmosis.lockup.QueryCondition";
    value: Uint8Array;
}
export interface QueryConditionAmino {
    lock_query_type?: LockQueryType;
    denom?: string;
    duration?: DurationAmino;
    timestamp?: string;
}
export interface QueryConditionAminoMsg {
    type: "osmosis/lockup/query-condition";
    value: QueryConditionAmino;
}
export interface QueryConditionSDKType {
    lock_query_type: LockQueryType;
    denom: string;
    duration: DurationSDKType;
    timestamp: Date;
}
export interface SyntheticLock {
    underlyingLockId: bigint;
    synthDenom: string;
    endTime: Date;
    duration: Duration;
}
export interface SyntheticLockProtoMsg {
    typeUrl: "/osmosis.lockup.SyntheticLock";
    value: Uint8Array;
}
export interface SyntheticLockAmino {
    underlying_lock_id?: string;
    synth_denom?: string;
    end_time?: string;
    duration?: DurationAmino;
}
export interface SyntheticLockAminoMsg {
    type: "osmosis/lockup/synthetic-lock";
    value: SyntheticLockAmino;
}
export interface SyntheticLockSDKType {
    underlying_lock_id: bigint;
    synth_denom: string;
    end_time: Date;
    duration: DurationSDKType;
}
export declare const PeriodLock: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is PeriodLock;
    isSDK(o: any): o is PeriodLockSDKType;
    isAmino(o: any): o is PeriodLockAmino;
    encode(message: PeriodLock, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): PeriodLock;
    fromPartial(object: Partial<PeriodLock>): PeriodLock;
    fromAmino(object: PeriodLockAmino): PeriodLock;
    toAmino(message: PeriodLock): PeriodLockAmino;
    fromAminoMsg(object: PeriodLockAminoMsg): PeriodLock;
    toAminoMsg(message: PeriodLock): PeriodLockAminoMsg;
    fromProtoMsg(message: PeriodLockProtoMsg): PeriodLock;
    toProto(message: PeriodLock): Uint8Array;
    toProtoMsg(message: PeriodLock): PeriodLockProtoMsg;
};
export declare const QueryCondition: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is QueryCondition;
    isSDK(o: any): o is QueryConditionSDKType;
    isAmino(o: any): o is QueryConditionAmino;
    encode(message: QueryCondition, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryCondition;
    fromPartial(object: Partial<QueryCondition>): QueryCondition;
    fromAmino(object: QueryConditionAmino): QueryCondition;
    toAmino(message: QueryCondition): QueryConditionAmino;
    fromAminoMsg(object: QueryConditionAminoMsg): QueryCondition;
    toAminoMsg(message: QueryCondition): QueryConditionAminoMsg;
    fromProtoMsg(message: QueryConditionProtoMsg): QueryCondition;
    toProto(message: QueryCondition): Uint8Array;
    toProtoMsg(message: QueryCondition): QueryConditionProtoMsg;
};
export declare const SyntheticLock: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is SyntheticLock;
    isSDK(o: any): o is SyntheticLockSDKType;
    isAmino(o: any): o is SyntheticLockAmino;
    encode(message: SyntheticLock, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): SyntheticLock;
    fromPartial(object: Partial<SyntheticLock>): SyntheticLock;
    fromAmino(object: SyntheticLockAmino): SyntheticLock;
    toAmino(message: SyntheticLock): SyntheticLockAmino;
    fromAminoMsg(object: SyntheticLockAminoMsg): SyntheticLock;
    toAminoMsg(message: SyntheticLock): SyntheticLockAminoMsg;
    fromProtoMsg(message: SyntheticLockProtoMsg): SyntheticLock;
    toProto(message: SyntheticLock): Uint8Array;
    toProtoMsg(message: SyntheticLock): SyntheticLockProtoMsg;
};
