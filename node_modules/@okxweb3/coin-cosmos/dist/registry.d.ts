import { TxBody } from "./types/cosmos/tx/v1beta1/tx";
import { Any } from "./types/google/protobuf/any";
import { protobuf } from "@okxweb3/crypto-lib";
import { DecodeObject, EncodeObject, TxBodyEncodeObject, TxBodyValue } from './encoding';
import { TelescopeGeneratedCodec } from "./types";
export declare const bankTypes: ReadonlyArray<[string, GeneratedType]>;
export declare const ibcTypes: ReadonlyArray<[string, GeneratedType]>;
export declare const stakingTypes: ReadonlyArray<[string, GeneratedType]>;
export interface TsProtoGeneratedType {
    readonly encode: (message: any | {
        [k: string]: any;
    }, writer?: protobuf.Writer) => protobuf.Writer;
    readonly decode: (input: Uint8Array | protobuf.Reader, length?: number) => any;
    readonly fromJSON: (object: any) => any;
    readonly fromPartial: (object: any) => any;
    readonly toJSON: (message: any | {
        [k: string]: any;
    }) => unknown;
}
export interface PbjsGeneratedType {
    readonly create: (properties?: {
        [k: string]: any;
    }) => any;
    readonly encode: (message: any | {
        [k: string]: any;
    }, writer?: protobuf.Writer) => protobuf.Writer;
    readonly decode: (reader: protobuf.Reader | Uint8Array, length?: number) => any;
}
export type GeneratedType = TsProtoGeneratedType | PbjsGeneratedType | TelescopeGeneratedCodec;
export declare function isTsProtoGeneratedType(type: GeneratedType): type is TsProtoGeneratedType;
export declare function isTelescopeGeneratedCodec(type: GeneratedType): type is TelescopeGeneratedCodec;
export declare function isTxBodyEncodeObject(encodeObject: EncodeObject): encodeObject is TxBodyEncodeObject;
export declare class Registry {
    private readonly types;
    constructor(customTypes?: Iterable<[string, GeneratedType]>);
    register(typeUrl: string, type: GeneratedType): void;
    lookupType(typeUrl: string): GeneratedType | undefined;
    private lookupTypeWithError;
    encode(encodeObject: EncodeObject): Uint8Array;
    encodeAsAny(encodeObject: EncodeObject): Any;
    encodeTxBody(txBodyFields: TxBodyValue): Uint8Array;
    decode({ typeUrl, value }: DecodeObject): any;
    decodeTxBody(txBody: Uint8Array): TxBody;
}
export declare const defaultRegistryTypes: ReadonlyArray<[string, GeneratedType]>;
export declare const registry: Registry;
export declare function registerExtraTypes(types?: ReadonlyArray<[string, GeneratedType]>): void;
