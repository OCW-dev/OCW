import { Coin } from "./types/cosmos/base/v1beta1/coin";
import { GeneratedType } from './registry';
import { OsmosisAminoConverters, OsmosisRegistry } from "./osmosis";
import { CosmWasmAminoConverter, CosmWasmRegistry } from "./cosmwasm";
import { KavaAminoConverters, KavaRegistry } from "./kava";
import { Height } from './types/ibc/applications/transfer/v1/tx';
import { EncodeObject, StdFee } from './encoding';
import { AminoConverter, AminoConverters, AminoMsg } from './amino/aminotypes';
import { AuthInfo } from './types/cosmos/tx/v1beta1/tx';
import { CosmosWallet } from "./CosmosWallet";
export declare function public2Address(publicKey: Uint8Array, useEthSecp256k1: boolean): Uint8Array;
export declare function private2Public(privateKey: Uint8Array, compress: boolean): Uint8Array;
export declare function private2Address(privateKey: Uint8Array, prefix: string, useEthSecp256k1: boolean): string;
export declare function getNewAddress(privkey: Uint8Array, prefix?: string, useEthSecp256k1?: boolean): string;
export declare function addressFromPublic(publicKeyHex: string, prefix?: string, useEthSecp256k1?: boolean): string;
export declare function validateAddress(address: string, prefix?: string): boolean;
export declare function sendToken(privateKey: Uint8Array, chainId: string, sequence: number, accountNumber: number, senderAddress: string, recipientAddress: string, amount: Coin[], fee: StdFee, timeoutHeight?: number, memo?: string, useEthSecp256k1?: boolean, publicKey?: string, pubKeyUrl?: string): Promise<any>;
export declare function sendIBCToken(privateKey: Uint8Array, chainId: string, sequence: number, accountNumber: number, senderAddress: string, recipientAddress: string, amount: Coin, sourcePort: string, sourceChannel: string, fee: StdFee, timeoutHeight?: number, ibcTimeoutHeight?: Height, ibcTimeoutTimestamp?: number, memo?: string, useEthSecp256k1?: boolean, publicKey?: string, pubKeyUrl?: string): Promise<string>;
export declare function sendMessages(privateKey: Uint8Array, chainId: string, sequence: number, accountNumber: number, messages: EncodeObject[], fee: StdFee, extraTypes?: ReadonlyArray<[string, GeneratedType]>, timeoutHeight?: number, memo?: string, useEthSecp256k1?: boolean, pubKeyUrl?: string): Promise<string>;
export interface AminoMsgData {
    chain_id: string;
    account_number: string;
    sequence: string;
    fee: StdFee;
    msgs: AminoMsg[];
    memo: string;
    timeout_height?: string;
}
export interface SignDocMessage {
    body: string;
    authInfo: string;
    chainId: string;
    accountNumber: string;
}
export declare function SignWithSignDocForINJ(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean): Promise<string>;
export declare function SignWithSignDocForINJWithTx(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean): Promise<string>;
export declare function signWithStdSignDocForINJ(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean): Promise<string>;
export declare function signWithStdSignDocForINJWithTx(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean, wallet: CosmosWallet): Promise<string>;
export declare function SignWithSignDoc(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean): Promise<string>;
export declare function SignWithSignDocWithTx(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean): Promise<string>;
export declare function signWithStdSignDoc(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean): Promise<string>;
export declare function signWithStdSignDocWithTx(privateKey: Uint8Array, message: string, useEthSecp256k1: boolean, prefix: string, wallet: CosmosWallet): Promise<string>;
export declare function sendAminoMessage(privateKey: Uint8Array, prefix: string, data: string, extraConverters?: AminoConverters, extraTypes?: ReadonlyArray<[string, GeneratedType]>, useEthSecp256k1?: boolean, pubKeyUrl?: string): Promise<string>;
export declare function amount2Coins(demon: string, amount: number): Coin[];
export declare function amount2Coin(demon: string, amount: number): Coin;
export declare function amount2StdFee(demon: string, amount: number, gasLimit: number): StdFee;
export declare function getMPCTransaction(raw: string, sig: string, publicKey: string, useEthSecp256k1?: boolean): string;
export declare function getMPCSignedMessage(hash: string, sig: string, publicKey: string, useEthSecp256k1?: boolean): string;
export declare function validSignedTransaction(tx: string, chainId: string, accountNumber: number, useEthSecp256k1: boolean, skipCheckSig: boolean): {
    body: any;
    authInfo: AuthInfo;
    signatures: Uint8Array[];
};
export { Coin, Height, EncodeObject, StdFee, GeneratedType, AminoConverters, AminoConverter, OsmosisRegistry, OsmosisAminoConverters, KavaRegistry, KavaAminoConverters, CosmWasmRegistry, CosmWasmAminoConverter, };
export * from "./CosmosWallet";
