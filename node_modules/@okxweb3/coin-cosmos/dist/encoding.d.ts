import { Long } from '@okxweb3/crypto-lib';
import { Any } from './types/google/protobuf/any';
import { Coin } from './types/cosmos/base/v1beta1/coin';
export interface EncodeObject {
    typeUrl: string;
    value: any;
}
export interface DecodeObject {
    readonly typeUrl: string;
    readonly value: Uint8Array;
}
export interface TxBodyValue {
    readonly messages: readonly EncodeObject[];
    readonly memo?: string;
    readonly timeoutHeight?: Long;
    readonly extensionOptions?: Any[];
    readonly nonCriticalExtensionOptions?: Any[];
}
export interface TxBodyEncodeObject extends EncodeObject {
    readonly typeUrl: "/cosmos.tx.v1beta1.TxBody";
    readonly value: TxBodyValue;
}
export interface Pubkey {
    readonly type: string;
    readonly value: any;
}
export interface SinglePubkey extends Pubkey {
    readonly type: string;
    readonly value: string;
}
export interface Secp256k1Pubkey extends SinglePubkey {
    readonly type: string;
    readonly value: string;
}
export declare const pubkeyType: {
    secp256k1: "tendermint/PubKeySecp256k1";
    ed25519: "tendermint/PubKeyEd25519";
    sr25519: "tendermint/PubKeySr25519";
    multisigThreshold: "tendermint/PubKeyMultisigThreshold";
};
export interface StdFee {
    readonly amount: readonly Coin[];
    readonly gas: string;
}
export interface StdSignature {
    readonly pub_key: Pubkey;
    readonly signature: string;
}
export declare function encodePubkey(pubkey: string, useEthSecp256k1: boolean, pubKeyUrl?: string): Any;
export declare function encodeSecp256k1Pubkey(pubkey: Uint8Array): string;
export declare function encodeSecp256k1Signature(pubkey: Uint8Array, signature: Uint8Array, useEthSecp256k1: boolean): string;
