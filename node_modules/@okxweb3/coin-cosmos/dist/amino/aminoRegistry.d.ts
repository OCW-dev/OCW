import { AminoConverter, AminoConverters, AminoMsg } from './aminotypes';
import { Coin } from "./coins";
export declare function assertDefinedAndNotNull<T>(value: T | undefined | null, msg?: string): asserts value is T;
export declare function createDefaultAminoConverters(prefix: string): AminoConverters;
interface AminoHeight {
    readonly revision_number?: string;
    readonly revision_height?: string;
}
export interface AminoMsgTransfer extends AminoMsg {
    readonly type: "cosmos-sdk/MsgTransfer";
    readonly value: {
        readonly source_port: string;
        readonly source_channel: string;
        readonly token?: Coin;
        readonly sender: string;
        readonly receiver: string;
        readonly timeout_height: AminoHeight;
        readonly timeout_timestamp?: string;
    };
}
export declare function isAminoMsgTransfer(msg: AminoMsg): msg is AminoMsgTransfer;
export declare function createIbcAminoConverters(): AminoConverters;
export interface AminoMsgSend extends AminoMsg {
    readonly type: "cosmos-sdk/MsgSend";
    readonly value: {
        readonly from_address: string;
        readonly to_address: string;
        readonly amount: readonly Coin[];
    };
}
export declare function isAminoMsgSend(msg: AminoMsg): msg is AminoMsgSend;
interface Input {
    readonly address: string;
    readonly coins: readonly Coin[];
}
interface Output {
    readonly address: string;
    readonly coins: readonly Coin[];
}
export interface AminoMsgMultiSend extends AminoMsg {
    readonly type: "cosmos-sdk/MsgMultiSend";
    readonly value: {
        readonly inputs: readonly Input[];
        readonly outputs: readonly Output[];
    };
}
export declare function isAminoMsgMultiSend(msg: AminoMsg): msg is AminoMsgMultiSend;
export declare function createBankAminoConverters(): AminoConverters;
interface CommissionRates {
    readonly rate: string;
    readonly max_rate: string;
    readonly max_change_rate: string;
}
interface Description {
    readonly moniker: string;
    readonly identity: string;
    readonly website: string;
    readonly security_contact: string;
    readonly details: string;
}
export interface AminoMsgCreateValidator extends AminoMsg {
    readonly type: "cosmos-sdk/MsgCreateValidator";
    readonly value: {
        readonly description: Description;
        readonly commission: CommissionRates;
        readonly min_self_delegation: string;
        readonly delegator_address: string;
        readonly validator_address: string;
        readonly pubkey: string;
        readonly value: Coin;
    };
}
export declare function isAminoMsgCreateValidator(msg: AminoMsg): msg is AminoMsgCreateValidator;
export interface AminoMsgEditValidator extends AminoMsg {
    readonly type: "cosmos-sdk/MsgEditValidator";
    readonly value: {
        readonly description: Description;
        readonly validator_address: string;
        readonly commission_rate: string;
        readonly min_self_delegation: string;
    };
}
export declare function isAminoMsgEditValidator(msg: AminoMsg): msg is AminoMsgEditValidator;
export interface AminoMsgDelegate extends AminoMsg {
    readonly type: "cosmos-sdk/MsgDelegate";
    readonly value: {
        readonly delegator_address: string;
        readonly validator_address: string;
        readonly amount: Coin;
    };
}
export declare function isAminoMsgDelegate(msg: AminoMsg): msg is AminoMsgDelegate;
export interface AminoMsgBeginRedelegate extends AminoMsg {
    readonly type: "cosmos-sdk/MsgBeginRedelegate";
    readonly value: {
        readonly delegator_address: string;
        readonly validator_src_address: string;
        readonly validator_dst_address: string;
        readonly amount: Coin;
    };
}
export declare function isAminoMsgBeginRedelegate(msg: AminoMsg): msg is AminoMsgBeginRedelegate;
export interface AminoMsgUndelegate extends AminoMsg {
    readonly type: "cosmos-sdk/MsgUndelegate";
    readonly value: {
        readonly delegator_address: string;
        readonly validator_address: string;
        readonly amount: Coin;
    };
}
export declare function isAminoMsgUndelegate(msg: AminoMsg): msg is AminoMsgUndelegate;
export declare function createStakingAminoConverters(prefix: string): Record<string, AminoConverter | "not_supported_by_chain">;
export {};
