"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeSecp256k1Signature = exports.encodeSecp256k1Pubkey = exports.encodePubkey = exports.pubkeyType = void 0;
const crypto_lib_1 = require("@okxweb3/crypto-lib");
const any_1 = require("./types/google/protobuf/any");
const keys_1 = require("./types/cosmos/crypto/secp256k1/keys");
exports.pubkeyType = {
    secp256k1: "tendermint/PubKeySecp256k1",
    ed25519: "tendermint/PubKeyEd25519",
    sr25519: "tendermint/PubKeySr25519",
    multisigThreshold: "tendermint/PubKeyMultisigThreshold",
};
function encodePubkey(pubkey, useEthSecp256k1, pubKeyUrl) {
    const pubkeyProto = keys_1.PubKey.fromPartial({
        key: crypto_lib_1.base.fromBase64(pubkey),
    });
    let typeUrl;
    if (pubKeyUrl) {
        typeUrl = pubKeyUrl;
    }
    else {
        typeUrl = useEthSecp256k1 ? "/ethermint.crypto.v1.ethsecp256k1.PubKey" : "/cosmos.crypto.secp256k1.PubKey";
    }
    return any_1.Any.fromPartial({
        typeUrl: typeUrl,
        value: Uint8Array.from(keys_1.PubKey.encode(pubkeyProto).finish()),
    });
}
exports.encodePubkey = encodePubkey;
function encodeSecp256k1Pubkey(pubkey) {
    if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {
        throw new Error("Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03");
    }
    return crypto_lib_1.base.toBase64(pubkey);
}
exports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;
function encodeSecp256k1Signature(pubkey, signature, useEthSecp256k1) {
    if (signature.length !== 64 && !useEthSecp256k1) {
        throw new Error("Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.");
    }
    if (signature.length !== 65 && useEthSecp256k1) {
        throw new Error("Signature must be 65 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.");
    }
    return crypto_lib_1.base.toBase64(signature);
}
exports.encodeSecp256k1Signature = encodeSecp256k1Signature;
//# sourceMappingURL=encoding.js.map