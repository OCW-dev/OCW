export declare function varint64read(this: ReaderLike): [number, number];
export declare function varint64write(lo: number, hi: number, bytes: number[]): void;
export declare function int64FromString(dec: string): {
    lo: number;
    hi: number;
};
export declare function int64ToString(lo: number, hi: number): string;
export declare function uInt64ToString(lo: number, hi: number): string;
export declare function varint32write(value: number, bytes: number[]): void;
export declare function varint32read(this: ReaderLike): number;
type ReaderLike = {
    buf: Uint8Array;
    pos: number;
    len: number;
    assertBounds(): void;
};
export declare function zzEncode(lo: number, hi: number): number[];
export declare function zzDecode(lo: number, hi: number): number[];
export declare function readUInt32(buf: Uint8Array, pos: number): number;
export declare function readInt32(buf: Uint8Array, pos: number): number;
export declare function writeVarint32(val: number, buf: Uint8Array | number[], pos: number): void;
export declare function writeVarint64(val: {
    lo: number;
    hi: number;
}, buf: Uint8Array | number[], pos: number): void;
export declare function int64Length(lo: number, hi: number): 10 | 3 | 1 | 2 | 7 | 8 | 4 | 5 | 6 | 9;
export declare function writeFixed32(val: number, buf: Uint8Array | number[], pos: number): void;
export declare function writeByte(val: number, buf: Uint8Array | number[], pos: number): void;
export {};
