export declare function bytesFromBase64(b64: string): Uint8Array;
export declare function base64FromBytes(arr: Uint8Array): string;
export interface AminoHeight {
    readonly revision_number?: string;
    readonly revision_height?: string;
}
export declare function omitDefault<T extends string | number | bigint | boolean>(input: T): T | undefined;
interface Duration {
    seconds: bigint;
    nanos: number;
}
export declare function toDuration(duration: string): Duration;
export declare function fromDuration(duration: Duration): string;
export declare function isSet(value: any): boolean;
export declare function isObject(value: any): boolean;
export interface PageRequest {
    key: Uint8Array;
    offset: bigint;
    limit: bigint;
    countTotal: boolean;
    reverse: boolean;
}
export interface PageRequestParams {
    'pagination.key'?: string;
    'pagination.offset'?: string;
    'pagination.limit'?: string;
    'pagination.count_total'?: boolean;
    'pagination.reverse'?: boolean;
}
export interface Params {
    params: PageRequestParams;
}
export declare const setPaginationParams: (options: Params, pagination?: PageRequest) => Params;
type Builtin = Date | Function | Uint8Array | string | number | bigint | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
interface Timestamp {
    seconds: bigint;
    nanos: number;
}
export declare function toTimestamp(date: Date): Timestamp;
export declare function fromTimestamp(t: Timestamp): Date;
export declare function fromJsonTimestamp(o: any): Timestamp;
export {};
