"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FungibleTokenPacketData = exports.protobufPackage = void 0;
const crypto_lib_1 = require("@okxweb3/crypto-lib");
const crypto_lib_2 = require("@okxweb3/crypto-lib");
const tx_1 = require("../../../../cosmos/tx/v1beta1/tx");
exports.protobufPackage = "ibc.applications.transfer.v2";
function createBaseFungibleTokenPacketData() {
    return { denom: "", amount: "", sender: "", receiver: "" };
}
exports.FungibleTokenPacketData = {
    encode(message, writer = crypto_lib_2._m0.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(18).string(message.amount);
        }
        if (message.sender !== "") {
            writer.uint32(26).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(34).string(message.receiver);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_2._m0.Reader ? input : new crypto_lib_2._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFungibleTokenPacketData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.amount = reader.string();
                    break;
                case 3:
                    message.sender = reader.string();
                    break;
                case 4:
                    message.receiver = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: (0, tx_1.isSet)(object.denom) ? String(object.denom) : "",
            amount: (0, tx_1.isSet)(object.amount) ? String(object.amount) : "",
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            receiver: (0, tx_1.isSet)(object.receiver) ? String(object.receiver) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.amount !== undefined && (obj.amount = message.amount);
        message.sender !== undefined && (obj.sender = message.sender);
        message.receiver !== undefined && (obj.receiver = message.receiver);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFungibleTokenPacketData();
        message.denom = object.denom ?? "";
        message.amount = object.amount ?? "";
        message.sender = object.sender ?? "";
        message.receiver = object.receiver ?? "";
        return message;
    },
};
if (crypto_lib_2._m0.util.Long !== crypto_lib_1.Long) {
    crypto_lib_2._m0.util.Long = crypto_lib_1.Long;
    crypto_lib_2._m0.configure();
}
//# sourceMappingURL=packet.js.map