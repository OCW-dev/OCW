"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgTransfer = exports.Height = exports.protobufPackage = void 0;
const crypto_lib_1 = require("@okxweb3/crypto-lib");
const crypto_lib_2 = require("@okxweb3/crypto-lib");
const coin_1 = require("../../../../cosmos/base/v1beta1/coin");
const tx_1 = require("../../../../cosmos/tx/v1beta1/tx");
exports.protobufPackage = "ibc.applications.transfer.v1";
function createBaseHeight() {
    return { revisionNumber: crypto_lib_1.Long.UZERO, revisionHeight: crypto_lib_1.Long.UZERO };
}
exports.Height = {
    encode(message, writer = crypto_lib_2._m0.Writer.create()) {
        if (!message.revisionNumber.isZero()) {
            writer.uint32(8).uint64(message.revisionNumber);
        }
        if (!message.revisionHeight.isZero()) {
            writer.uint32(16).uint64(message.revisionHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_2._m0.Reader ? input : new crypto_lib_2._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeight();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.revisionNumber = reader.uint64();
                    break;
                case 2:
                    message.revisionHeight = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            revisionNumber: (0, tx_1.isSet)(object.revisionNumber) ? crypto_lib_1.Long.fromString(object.revisionNumber) : crypto_lib_1.Long.UZERO,
            revisionHeight: (0, tx_1.isSet)(object.revisionHeight) ? crypto_lib_1.Long.fromString(object.revisionHeight) : crypto_lib_1.Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.revisionNumber !== undefined &&
            (obj.revisionNumber = (message.revisionNumber || crypto_lib_1.Long.UZERO).toString());
        message.revisionHeight !== undefined &&
            (obj.revisionHeight = (message.revisionHeight || crypto_lib_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseHeight();
        message.revisionNumber =
            object.revisionNumber !== undefined && object.revisionNumber !== null
                ? crypto_lib_1.Long.fromValue(object.revisionNumber)
                : crypto_lib_1.Long.UZERO;
        message.revisionHeight =
            object.revisionHeight !== undefined && object.revisionHeight !== null
                ? crypto_lib_1.Long.fromValue(object.revisionHeight)
                : crypto_lib_1.Long.UZERO;
        return message;
    },
};
function createBaseMsgTransfer() {
    return {
        sourcePort: "",
        sourceChannel: "",
        token: undefined,
        sender: "",
        receiver: "",
        timeoutHeight: undefined,
        timeoutTimestamp: crypto_lib_1.Long.UZERO,
    };
}
exports.MsgTransfer = {
    encode(message, writer = crypto_lib_2._m0.Writer.create()) {
        if (message.sourcePort !== "") {
            writer.uint32(10).string(message.sourcePort);
        }
        if (message.sourceChannel !== "") {
            writer.uint32(18).string(message.sourceChannel);
        }
        if (message.token !== undefined) {
            coin_1.Coin.encode(message.token, writer.uint32(26).fork()).ldelim();
        }
        if (message.sender !== "") {
            writer.uint32(34).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(42).string(message.receiver);
        }
        if (message.timeoutHeight !== undefined) {
            exports.Height.encode(message.timeoutHeight, writer.uint32(50).fork()).ldelim();
        }
        if (!message.timeoutTimestamp.isZero()) {
            writer.uint32(56).uint64(message.timeoutTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof crypto_lib_2._m0.Reader ? input : new crypto_lib_2._m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTransfer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sourcePort = reader.string();
                    break;
                case 2:
                    message.sourceChannel = reader.string();
                    break;
                case 3:
                    message.token = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.sender = reader.string();
                    break;
                case 5:
                    message.receiver = reader.string();
                    break;
                case 6:
                    message.timeoutHeight = exports.Height.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.timeoutTimestamp = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sourcePort: (0, tx_1.isSet)(object.sourcePort) ? String(object.sourcePort) : "",
            sourceChannel: (0, tx_1.isSet)(object.sourceChannel) ? String(object.sourceChannel) : "",
            token: (0, tx_1.isSet)(object.token) ? coin_1.Coin.fromJSON(object.token) : undefined,
            sender: (0, tx_1.isSet)(object.sender) ? String(object.sender) : "",
            receiver: (0, tx_1.isSet)(object.receiver) ? String(object.receiver) : "",
            timeoutHeight: (0, tx_1.isSet)(object.timeoutHeight) ? exports.Height.fromJSON(object.timeoutHeight) : undefined,
            timeoutTimestamp: (0, tx_1.isSet)(object.timeoutTimestamp)
                ? crypto_lib_1.Long.fromString(object.timeoutTimestamp)
                : crypto_lib_1.Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);
        message.sourceChannel !== undefined && (obj.sourceChannel = message.sourceChannel);
        message.token !== undefined && (obj.token = message.token ? coin_1.Coin.toJSON(message.token) : undefined);
        message.sender !== undefined && (obj.sender = message.sender);
        message.receiver !== undefined && (obj.receiver = message.receiver);
        message.timeoutHeight !== undefined &&
            (obj.timeoutHeight = message.timeoutHeight ? exports.Height.toJSON(message.timeoutHeight) : undefined);
        message.timeoutTimestamp !== undefined &&
            (obj.timeoutTimestamp = (message.timeoutTimestamp || crypto_lib_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgTransfer();
        message.sourcePort = object.sourcePort ?? "";
        message.sourceChannel = object.sourceChannel ?? "";
        message.token =
            object.token !== undefined && object.token !== null ? coin_1.Coin.fromPartial(object.token) : undefined;
        message.sender = object.sender ?? "";
        message.receiver = object.receiver ?? "";
        message.timeoutHeight =
            object.timeoutHeight !== undefined && object.timeoutHeight !== null
                ? exports.Height.fromPartial(object.timeoutHeight)
                : undefined;
        message.timeoutTimestamp =
            object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null
                ? crypto_lib_1.Long.fromValue(object.timeoutTimestamp)
                : crypto_lib_1.Long.UZERO;
        return message;
    },
};
if (crypto_lib_2._m0.util.Long !== crypto_lib_1.Long) {
    crypto_lib_2._m0.util.Long = crypto_lib_1.Long;
    crypto_lib_2._m0.configure();
}
//# sourceMappingURL=tx.js.map