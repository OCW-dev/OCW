import { Long } from '@okxweb3/crypto-lib';
import { SignDoc } from './types/cosmos/tx/v1beta1/tx';
import { Any } from './types/google/protobuf/any';
import { SignMode } from './types/cosmos/tx/signing/v1beta1/signing';
import { Coin } from './types/cosmos/base/v1beta1/coin';
import { EncodeObject, StdFee } from './encoding';
export interface SignerData {
    readonly accountNumber: number;
    readonly sequence: number;
    readonly chainId: string;
    readonly privateKey: Uint8Array;
    readonly useEthSecp256k1: boolean;
    readonly publicKey?: string;
    readonly pubKeyUrl?: string;
}
export declare function makeAuthInfoBytes(signers: ReadonlyArray<{
    readonly pubkey: Any;
    readonly sequence: number;
}>, feeAmount: readonly Coin[], gasLimit: number, signMode?: SignMode): Uint8Array;
export declare function makeSignDoc(bodyBytes: Uint8Array, authInfoBytes: Uint8Array, chainId: string, accountNumber: number): SignDoc;
export declare function makeSignBytes({ accountNumber, authInfoBytes, bodyBytes, chainId }: SignDoc): Uint8Array;
export declare function signTx(messages: EncodeObject[], fee: StdFee, memo: string | undefined, timeoutHeight: Long, signerData: SignerData): Promise<any>;
export declare function signDirect(messages: readonly EncodeObject[], fee: StdFee, memo: string, timeoutHeight: Long, { accountNumber, sequence, chainId, privateKey, useEthSecp256k1, publicKey, pubKeyUrl }: SignerData): Promise<any>;
export declare function doSign(signDoc: SignDoc, publicKey: Uint8Array, privateKey: Uint8Array, useEthSecp256k1: boolean): Promise<string>;
