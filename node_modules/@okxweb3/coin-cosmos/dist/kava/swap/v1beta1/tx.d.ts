import { Coin, CoinAmino, CoinSDKType } from "../../../typesV2/cosmos/base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../../binary";
export interface MsgDeposit {
    depositor: string;
    tokenA: Coin;
    tokenB: Coin;
    slippage: string;
    deadline: bigint;
}
export interface MsgDepositProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgDeposit";
    value: Uint8Array;
}
export interface MsgDepositAmino {
    depositor?: string;
    token_a?: CoinAmino;
    token_b?: CoinAmino;
    slippage?: string;
    deadline?: string;
}
export interface MsgDepositAminoMsg {
    type: "/kava.swap.v1beta1.MsgDeposit";
    value: MsgDepositAmino;
}
export interface MsgDepositSDKType {
    depositor: string;
    token_a: CoinSDKType;
    token_b: CoinSDKType;
    slippage: string;
    deadline: bigint;
}
export interface MsgDepositResponse {
}
export interface MsgDepositResponseProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgDepositResponse";
    value: Uint8Array;
}
export interface MsgDepositResponseAmino {
}
export interface MsgDepositResponseAminoMsg {
    type: "/kava.swap.v1beta1.MsgDepositResponse";
    value: MsgDepositResponseAmino;
}
export interface MsgDepositResponseSDKType {
}
export interface MsgWithdraw {
    from: string;
    shares: string;
    minTokenA: Coin;
    minTokenB: Coin;
    deadline: bigint;
}
export interface MsgWithdrawProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgWithdraw";
    value: Uint8Array;
}
export interface MsgWithdrawAmino {
    from?: string;
    shares?: string;
    min_token_a?: CoinAmino;
    min_token_b?: CoinAmino;
    deadline?: string;
}
export interface MsgWithdrawAminoMsg {
    type: "/kava.swap.v1beta1.MsgWithdraw";
    value: MsgWithdrawAmino;
}
export interface MsgWithdrawSDKType {
    from: string;
    shares: string;
    min_token_a: CoinSDKType;
    min_token_b: CoinSDKType;
    deadline: bigint;
}
export interface MsgWithdrawResponse {
}
export interface MsgWithdrawResponseProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgWithdrawResponse";
    value: Uint8Array;
}
export interface MsgWithdrawResponseAmino {
}
export interface MsgWithdrawResponseAminoMsg {
    type: "/kava.swap.v1beta1.MsgWithdrawResponse";
    value: MsgWithdrawResponseAmino;
}
export interface MsgWithdrawResponseSDKType {
}
export interface MsgSwapExactForTokens {
    requester: string;
    exactTokenA: Coin;
    tokenB: Coin;
    slippage: string;
    deadline: bigint;
}
export interface MsgSwapExactForTokensProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgSwapExactForTokens";
    value: Uint8Array;
}
export interface MsgSwapExactForTokensAmino {
    requester?: string;
    exact_token_a?: CoinAmino;
    token_b?: CoinAmino;
    slippage?: string;
    deadline?: string;
}
export interface MsgSwapExactForTokensAminoMsg {
    type: "/kava.swap.v1beta1.MsgSwapExactForTokens";
    value: MsgSwapExactForTokensAmino;
}
export interface MsgSwapExactForTokensSDKType {
    requester: string;
    exact_token_a: CoinSDKType;
    token_b: CoinSDKType;
    slippage: string;
    deadline: bigint;
}
export interface MsgSwapExactForTokensResponse {
}
export interface MsgSwapExactForTokensResponseProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgSwapExactForTokensResponse";
    value: Uint8Array;
}
export interface MsgSwapExactForTokensResponseAmino {
}
export interface MsgSwapExactForTokensResponseAminoMsg {
    type: "/kava.swap.v1beta1.MsgSwapExactForTokensResponse";
    value: MsgSwapExactForTokensResponseAmino;
}
export interface MsgSwapExactForTokensResponseSDKType {
}
export interface MsgSwapForExactTokens {
    requester: string;
    tokenA: Coin;
    exactTokenB: Coin;
    slippage: string;
    deadline: bigint;
}
export interface MsgSwapForExactTokensProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgSwapForExactTokens";
    value: Uint8Array;
}
export interface MsgSwapForExactTokensAmino {
    requester?: string;
    token_a?: CoinAmino;
    exact_token_b?: CoinAmino;
    slippage?: string;
    deadline?: string;
}
export interface MsgSwapForExactTokensAminoMsg {
    type: "/kava.swap.v1beta1.MsgSwapForExactTokens";
    value: MsgSwapForExactTokensAmino;
}
export interface MsgSwapForExactTokensSDKType {
    requester: string;
    token_a: CoinSDKType;
    exact_token_b: CoinSDKType;
    slippage: string;
    deadline: bigint;
}
export interface MsgSwapForExactTokensResponse {
}
export interface MsgSwapForExactTokensResponseProtoMsg {
    typeUrl: "/kava.swap.v1beta1.MsgSwapForExactTokensResponse";
    value: Uint8Array;
}
export interface MsgSwapForExactTokensResponseAmino {
}
export interface MsgSwapForExactTokensResponseAminoMsg {
    type: "/kava.swap.v1beta1.MsgSwapForExactTokensResponse";
    value: MsgSwapForExactTokensResponseAmino;
}
export interface MsgSwapForExactTokensResponseSDKType {
}
export declare const MsgDeposit: {
    typeUrl: string;
    encode(message: MsgDeposit, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgDeposit;
    fromPartial(object: Partial<MsgDeposit>): MsgDeposit;
    fromAmino(object: MsgDepositAmino): MsgDeposit;
    toAmino(message: MsgDeposit): MsgDepositAmino;
    fromAminoMsg(object: MsgDepositAminoMsg): MsgDeposit;
    fromProtoMsg(message: MsgDepositProtoMsg): MsgDeposit;
    toProto(message: MsgDeposit): Uint8Array;
    toProtoMsg(message: MsgDeposit): MsgDepositProtoMsg;
};
export declare const MsgDepositResponse: {
    typeUrl: string;
    encode(_: MsgDepositResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgDepositResponse;
    fromPartial(_: Partial<MsgDepositResponse>): MsgDepositResponse;
    fromAmino(_: MsgDepositResponseAmino): MsgDepositResponse;
    toAmino(_: MsgDepositResponse): MsgDepositResponseAmino;
    fromAminoMsg(object: MsgDepositResponseAminoMsg): MsgDepositResponse;
    fromProtoMsg(message: MsgDepositResponseProtoMsg): MsgDepositResponse;
    toProto(message: MsgDepositResponse): Uint8Array;
    toProtoMsg(message: MsgDepositResponse): MsgDepositResponseProtoMsg;
};
export declare const MsgWithdraw: {
    typeUrl: string;
    encode(message: MsgWithdraw, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdraw;
    fromPartial(object: Partial<MsgWithdraw>): MsgWithdraw;
    fromAmino(object: MsgWithdrawAmino): MsgWithdraw;
    toAmino(message: MsgWithdraw): MsgWithdrawAmino;
    fromAminoMsg(object: MsgWithdrawAminoMsg): MsgWithdraw;
    fromProtoMsg(message: MsgWithdrawProtoMsg): MsgWithdraw;
    toProto(message: MsgWithdraw): Uint8Array;
    toProtoMsg(message: MsgWithdraw): MsgWithdrawProtoMsg;
};
export declare const MsgWithdrawResponse: {
    typeUrl: string;
    encode(_: MsgWithdrawResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawResponse;
    fromPartial(_: Partial<MsgWithdrawResponse>): MsgWithdrawResponse;
    fromAmino(_: MsgWithdrawResponseAmino): MsgWithdrawResponse;
    toAmino(_: MsgWithdrawResponse): MsgWithdrawResponseAmino;
    fromAminoMsg(object: MsgWithdrawResponseAminoMsg): MsgWithdrawResponse;
    fromProtoMsg(message: MsgWithdrawResponseProtoMsg): MsgWithdrawResponse;
    toProto(message: MsgWithdrawResponse): Uint8Array;
    toProtoMsg(message: MsgWithdrawResponse): MsgWithdrawResponseProtoMsg;
};
export declare const MsgSwapExactForTokens: {
    typeUrl: string;
    encode(message: MsgSwapExactForTokens, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactForTokens;
    fromPartial(object: Partial<MsgSwapExactForTokens>): MsgSwapExactForTokens;
    fromAmino(object: MsgSwapExactForTokensAmino): MsgSwapExactForTokens;
    toAmino(message: MsgSwapExactForTokens): MsgSwapExactForTokensAmino;
    fromAminoMsg(object: MsgSwapExactForTokensAminoMsg): MsgSwapExactForTokens;
    fromProtoMsg(message: MsgSwapExactForTokensProtoMsg): MsgSwapExactForTokens;
    toProto(message: MsgSwapExactForTokens): Uint8Array;
    toProtoMsg(message: MsgSwapExactForTokens): MsgSwapExactForTokensProtoMsg;
};
export declare const MsgSwapExactForTokensResponse: {
    typeUrl: string;
    encode(_: MsgSwapExactForTokensResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactForTokensResponse;
    fromPartial(_: Partial<MsgSwapExactForTokensResponse>): MsgSwapExactForTokensResponse;
    fromAmino(_: MsgSwapExactForTokensResponseAmino): MsgSwapExactForTokensResponse;
    toAmino(_: MsgSwapExactForTokensResponse): MsgSwapExactForTokensResponseAmino;
    fromAminoMsg(object: MsgSwapExactForTokensResponseAminoMsg): MsgSwapExactForTokensResponse;
    fromProtoMsg(message: MsgSwapExactForTokensResponseProtoMsg): MsgSwapExactForTokensResponse;
    toProto(message: MsgSwapExactForTokensResponse): Uint8Array;
    toProtoMsg(message: MsgSwapExactForTokensResponse): MsgSwapExactForTokensResponseProtoMsg;
};
export declare const MsgSwapForExactTokens: {
    typeUrl: string;
    encode(message: MsgSwapForExactTokens, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapForExactTokens;
    fromPartial(object: Partial<MsgSwapForExactTokens>): MsgSwapForExactTokens;
    fromAmino(object: MsgSwapForExactTokensAmino): MsgSwapForExactTokens;
    toAmino(message: MsgSwapForExactTokens): MsgSwapForExactTokensAmino;
    fromAminoMsg(object: MsgSwapForExactTokensAminoMsg): MsgSwapForExactTokens;
    fromProtoMsg(message: MsgSwapForExactTokensProtoMsg): MsgSwapForExactTokens;
    toProto(message: MsgSwapForExactTokens): Uint8Array;
    toProtoMsg(message: MsgSwapForExactTokens): MsgSwapForExactTokensProtoMsg;
};
export declare const MsgSwapForExactTokensResponse: {
    typeUrl: string;
    encode(_: MsgSwapForExactTokensResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapForExactTokensResponse;
    fromPartial(_: Partial<MsgSwapForExactTokensResponse>): MsgSwapForExactTokensResponse;
    fromAmino(_: MsgSwapForExactTokensResponseAmino): MsgSwapForExactTokensResponse;
    toAmino(_: MsgSwapForExactTokensResponse): MsgSwapForExactTokensResponseAmino;
    fromAminoMsg(object: MsgSwapForExactTokensResponseAminoMsg): MsgSwapForExactTokensResponse;
    fromProtoMsg(message: MsgSwapForExactTokensResponseProtoMsg): MsgSwapForExactTokensResponse;
    toProto(message: MsgSwapForExactTokensResponse): Uint8Array;
    toProtoMsg(message: MsgSwapForExactTokensResponse): MsgSwapForExactTokensResponseProtoMsg;
};
