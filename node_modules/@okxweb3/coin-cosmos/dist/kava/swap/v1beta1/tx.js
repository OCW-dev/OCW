"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSwapForExactTokensResponse = exports.MsgSwapForExactTokens = exports.MsgSwapExactForTokensResponse = exports.MsgSwapExactForTokens = exports.MsgWithdrawResponse = exports.MsgWithdraw = exports.MsgDepositResponse = exports.MsgDeposit = void 0;
const coin_1 = require("../../../typesV2/cosmos/base/v1beta1/coin");
const binary_1 = require("../../../binary");
const math_1 = require("@cosmjs/math");
function createBaseMsgDeposit() {
    return {
        depositor: "",
        tokenA: coin_1.Coin.fromPartial({}),
        tokenB: coin_1.Coin.fromPartial({}),
        slippage: "",
        deadline: BigInt(0)
    };
}
exports.MsgDeposit = {
    typeUrl: "/kava.swap.v1beta1.MsgDeposit",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.depositor !== "") {
            writer.uint32(10).string(message.depositor);
        }
        if (message.tokenA !== undefined) {
            coin_1.Coin.encode(message.tokenA, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenB !== undefined) {
            coin_1.Coin.encode(message.tokenB, writer.uint32(26).fork()).ldelim();
        }
        if (message.slippage !== "") {
            writer.uint32(34).string(math_1.Decimal.fromUserInput(message.slippage, 18).atomics);
        }
        if (message.deadline !== BigInt(0)) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.tokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.tokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.slippage = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgDeposit();
        message.depositor = object.depositor ?? "";
        message.tokenA = object.tokenA !== undefined && object.tokenA !== null ? coin_1.Coin.fromPartial(object.tokenA) : undefined;
        message.tokenB = object.tokenB !== undefined && object.tokenB !== null ? coin_1.Coin.fromPartial(object.tokenB) : undefined;
        message.slippage = object.slippage ?? "";
        message.deadline = object.deadline !== undefined && object.deadline !== null ? BigInt(object.deadline.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgDeposit();
        if (object.depositor !== undefined && object.depositor !== null) {
            message.depositor = object.depositor;
        }
        if (object.token_a !== undefined && object.token_a !== null) {
            message.tokenA = coin_1.Coin.fromAmino(object.token_a);
        }
        if (object.token_b !== undefined && object.token_b !== null) {
            message.tokenB = coin_1.Coin.fromAmino(object.token_b);
        }
        if (object.slippage !== undefined && object.slippage !== null) {
            message.slippage = object.slippage;
        }
        if (object.deadline !== undefined && object.deadline !== null) {
            message.deadline = BigInt(object.deadline);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.depositor = message.depositor === "" ? undefined : message.depositor;
        obj.token_a = message.tokenA ? coin_1.Coin.toAmino(message.tokenA) : undefined;
        obj.token_b = message.tokenB ? coin_1.Coin.toAmino(message.tokenB) : undefined;
        obj.slippage = message.slippage === "" ? undefined : message.slippage;
        obj.deadline = message.deadline !== BigInt(0) ? message.deadline.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgDeposit.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgDeposit.decode(message.value);
    },
    toProto(message) {
        return exports.MsgDeposit.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgDeposit",
            value: exports.MsgDeposit.encode(message).finish()
        };
    }
};
function createBaseMsgDepositResponse() {
    return {};
}
exports.MsgDepositResponse = {
    typeUrl: "/kava.swap.v1beta1.MsgDepositResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDepositResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgDepositResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgDepositResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgDepositResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgDepositResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgDepositResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgDepositResponse",
            value: exports.MsgDepositResponse.encode(message).finish()
        };
    }
};
function createBaseMsgWithdraw() {
    return {
        from: "",
        shares: "",
        minTokenA: coin_1.Coin.fromPartial({}),
        minTokenB: coin_1.Coin.fromPartial({}),
        deadline: BigInt(0)
    };
}
exports.MsgWithdraw = {
    typeUrl: "/kava.swap.v1beta1.MsgWithdraw",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.from !== "") {
            writer.uint32(10).string(message.from);
        }
        if (message.shares !== "") {
            writer.uint32(18).string(message.shares);
        }
        if (message.minTokenA !== undefined) {
            coin_1.Coin.encode(message.minTokenA, writer.uint32(26).fork()).ldelim();
        }
        if (message.minTokenB !== undefined) {
            coin_1.Coin.encode(message.minTokenB, writer.uint32(34).fork()).ldelim();
        }
        if (message.deadline !== BigInt(0)) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdraw();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.shares = reader.string();
                    break;
                case 3:
                    message.minTokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.minTokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgWithdraw();
        message.from = object.from ?? "";
        message.shares = object.shares ?? "";
        message.minTokenA = object.minTokenA !== undefined && object.minTokenA !== null ? coin_1.Coin.fromPartial(object.minTokenA) : undefined;
        message.minTokenB = object.minTokenB !== undefined && object.minTokenB !== null ? coin_1.Coin.fromPartial(object.minTokenB) : undefined;
        message.deadline = object.deadline !== undefined && object.deadline !== null ? BigInt(object.deadline.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgWithdraw();
        if (object.from !== undefined && object.from !== null) {
            message.from = object.from;
        }
        if (object.shares !== undefined && object.shares !== null) {
            message.shares = object.shares;
        }
        if (object.min_token_a !== undefined && object.min_token_a !== null) {
            message.minTokenA = coin_1.Coin.fromAmino(object.min_token_a);
        }
        if (object.min_token_b !== undefined && object.min_token_b !== null) {
            message.minTokenB = coin_1.Coin.fromAmino(object.min_token_b);
        }
        if (object.deadline !== undefined && object.deadline !== null) {
            message.deadline = BigInt(object.deadline);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.from = message.from === "" ? undefined : message.from;
        obj.shares = message.shares === "" ? undefined : message.shares;
        obj.min_token_a = message.minTokenA ? coin_1.Coin.toAmino(message.minTokenA) : undefined;
        obj.min_token_b = message.minTokenB ? coin_1.Coin.toAmino(message.minTokenB) : undefined;
        obj.deadline = message.deadline !== BigInt(0) ? message.deadline.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdraw.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgWithdraw.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdraw.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgWithdraw",
            value: exports.MsgWithdraw.encode(message).finish()
        };
    }
};
function createBaseMsgWithdrawResponse() {
    return {};
}
exports.MsgWithdrawResponse = {
    typeUrl: "/kava.swap.v1beta1.MsgWithdrawResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgWithdrawResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgWithdrawResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdrawResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgWithdrawResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdrawResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgWithdrawResponse",
            value: exports.MsgWithdrawResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSwapExactForTokens() {
    return {
        requester: "",
        exactTokenA: coin_1.Coin.fromPartial({}),
        tokenB: coin_1.Coin.fromPartial({}),
        slippage: "",
        deadline: BigInt(0)
    };
}
exports.MsgSwapExactForTokens = {
    typeUrl: "/kava.swap.v1beta1.MsgSwapExactForTokens",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.requester !== "") {
            writer.uint32(10).string(message.requester);
        }
        if (message.exactTokenA !== undefined) {
            coin_1.Coin.encode(message.exactTokenA, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenB !== undefined) {
            coin_1.Coin.encode(message.tokenB, writer.uint32(26).fork()).ldelim();
        }
        if (message.slippage !== "") {
            writer.uint32(34).string(math_1.Decimal.fromUserInput(message.slippage, 18).atomics);
        }
        if (message.deadline !== BigInt(0)) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapExactForTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requester = reader.string();
                    break;
                case 2:
                    message.exactTokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.tokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.slippage = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSwapExactForTokens();
        message.requester = object.requester ?? "";
        message.exactTokenA = object.exactTokenA !== undefined && object.exactTokenA !== null ? coin_1.Coin.fromPartial(object.exactTokenA) : undefined;
        message.tokenB = object.tokenB !== undefined && object.tokenB !== null ? coin_1.Coin.fromPartial(object.tokenB) : undefined;
        message.slippage = object.slippage ?? "";
        message.deadline = object.deadline !== undefined && object.deadline !== null ? BigInt(object.deadline.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgSwapExactForTokens();
        if (object.requester !== undefined && object.requester !== null) {
            message.requester = object.requester;
        }
        if (object.exact_token_a !== undefined && object.exact_token_a !== null) {
            message.exactTokenA = coin_1.Coin.fromAmino(object.exact_token_a);
        }
        if (object.token_b !== undefined && object.token_b !== null) {
            message.tokenB = coin_1.Coin.fromAmino(object.token_b);
        }
        if (object.slippage !== undefined && object.slippage !== null) {
            message.slippage = object.slippage;
        }
        if (object.deadline !== undefined && object.deadline !== null) {
            message.deadline = BigInt(object.deadline);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.requester = message.requester === "" ? undefined : message.requester;
        obj.exact_token_a = message.exactTokenA ? coin_1.Coin.toAmino(message.exactTokenA) : undefined;
        obj.token_b = message.tokenB ? coin_1.Coin.toAmino(message.tokenB) : undefined;
        obj.slippage = message.slippage === "" ? undefined : message.slippage;
        obj.deadline = message.deadline !== BigInt(0) ? message.deadline.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSwapExactForTokens.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSwapExactForTokens.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSwapExactForTokens.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgSwapExactForTokens",
            value: exports.MsgSwapExactForTokens.encode(message).finish()
        };
    }
};
function createBaseMsgSwapExactForTokensResponse() {
    return {};
}
exports.MsgSwapExactForTokensResponse = {
    typeUrl: "/kava.swap.v1beta1.MsgSwapExactForTokensResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapExactForTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSwapExactForTokensResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgSwapExactForTokensResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSwapExactForTokensResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSwapExactForTokensResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSwapExactForTokensResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgSwapExactForTokensResponse",
            value: exports.MsgSwapExactForTokensResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSwapForExactTokens() {
    return {
        requester: "",
        tokenA: coin_1.Coin.fromPartial({}),
        exactTokenB: coin_1.Coin.fromPartial({}),
        slippage: "",
        deadline: BigInt(0)
    };
}
exports.MsgSwapForExactTokens = {
    typeUrl: "/kava.swap.v1beta1.MsgSwapForExactTokens",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.requester !== "") {
            writer.uint32(10).string(message.requester);
        }
        if (message.tokenA !== undefined) {
            coin_1.Coin.encode(message.tokenA, writer.uint32(18).fork()).ldelim();
        }
        if (message.exactTokenB !== undefined) {
            coin_1.Coin.encode(message.exactTokenB, writer.uint32(26).fork()).ldelim();
        }
        if (message.slippage !== "") {
            writer.uint32(34).string(math_1.Decimal.fromUserInput(message.slippage, 18).atomics);
        }
        if (message.deadline !== BigInt(0)) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapForExactTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requester = reader.string();
                    break;
                case 2:
                    message.tokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.exactTokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.slippage = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSwapForExactTokens();
        message.requester = object.requester ?? "";
        message.tokenA = object.tokenA !== undefined && object.tokenA !== null ? coin_1.Coin.fromPartial(object.tokenA) : undefined;
        message.exactTokenB = object.exactTokenB !== undefined && object.exactTokenB !== null ? coin_1.Coin.fromPartial(object.exactTokenB) : undefined;
        message.slippage = object.slippage ?? "";
        message.deadline = object.deadline !== undefined && object.deadline !== null ? BigInt(object.deadline.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgSwapForExactTokens();
        if (object.requester !== undefined && object.requester !== null) {
            message.requester = object.requester;
        }
        if (object.token_a !== undefined && object.token_a !== null) {
            message.tokenA = coin_1.Coin.fromAmino(object.token_a);
        }
        if (object.exact_token_b !== undefined && object.exact_token_b !== null) {
            message.exactTokenB = coin_1.Coin.fromAmino(object.exact_token_b);
        }
        if (object.slippage !== undefined && object.slippage !== null) {
            message.slippage = object.slippage;
        }
        if (object.deadline !== undefined && object.deadline !== null) {
            message.deadline = BigInt(object.deadline);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.requester = message.requester === "" ? undefined : message.requester;
        obj.token_a = message.tokenA ? coin_1.Coin.toAmino(message.tokenA) : undefined;
        obj.exact_token_b = message.exactTokenB ? coin_1.Coin.toAmino(message.exactTokenB) : undefined;
        obj.slippage = message.slippage === "" ? undefined : message.slippage;
        obj.deadline = message.deadline !== BigInt(0) ? message.deadline.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSwapForExactTokens.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSwapForExactTokens.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSwapForExactTokens.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgSwapForExactTokens",
            value: exports.MsgSwapForExactTokens.encode(message).finish()
        };
    }
};
function createBaseMsgSwapForExactTokensResponse() {
    return {};
}
exports.MsgSwapForExactTokensResponse = {
    typeUrl: "/kava.swap.v1beta1.MsgSwapForExactTokensResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapForExactTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSwapForExactTokensResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgSwapForExactTokensResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSwapForExactTokensResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSwapForExactTokensResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSwapForExactTokensResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.swap.v1beta1.MsgSwapForExactTokensResponse",
            value: exports.MsgSwapForExactTokensResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map