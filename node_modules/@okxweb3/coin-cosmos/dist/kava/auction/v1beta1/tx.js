"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgPlaceBidResponse = exports.MsgPlaceBid = void 0;
const coin_1 = require("../../../typesV2/cosmos/base/v1beta1/coin");
const binary_1 = require("../../../binary");
function createBaseMsgPlaceBid() {
    return {
        auctionId: BigInt(0),
        bidder: "",
        amount: coin_1.Coin.fromPartial({})
    };
}
exports.MsgPlaceBid = {
    typeUrl: "/kava.auction.v1beta1.MsgPlaceBid",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.auctionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.auctionId);
        }
        if (message.bidder !== "") {
            writer.uint32(18).string(message.bidder);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPlaceBid();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.auctionId = reader.uint64();
                    break;
                case 2:
                    message.bidder = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgPlaceBid();
        message.auctionId = object.auctionId !== undefined && object.auctionId !== null ? BigInt(object.auctionId.toString()) : BigInt(0);
        message.bidder = object.bidder ?? "";
        message.amount = object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgPlaceBid();
        if (object.auction_id !== undefined && object.auction_id !== null) {
            message.auctionId = BigInt(object.auction_id);
        }
        if (object.bidder !== undefined && object.bidder !== null) {
            message.bidder = object.bidder;
        }
        if (object.amount !== undefined && object.amount !== null) {
            message.amount = coin_1.Coin.fromAmino(object.amount);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.auction_id = message.auctionId !== BigInt(0) ? message.auctionId.toString() : undefined;
        obj.bidder = message.bidder === "" ? undefined : message.bidder;
        obj.amount = message.amount ? coin_1.Coin.toAmino(message.amount) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgPlaceBid.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgPlaceBid.decode(message.value);
    },
    toProto(message) {
        return exports.MsgPlaceBid.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.auction.v1beta1.MsgPlaceBid",
            value: exports.MsgPlaceBid.encode(message).finish()
        };
    }
};
function createBaseMsgPlaceBidResponse() {
    return {};
}
exports.MsgPlaceBidResponse = {
    typeUrl: "/kava.auction.v1beta1.MsgPlaceBidResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPlaceBidResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgPlaceBidResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgPlaceBidResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgPlaceBidResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgPlaceBidResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgPlaceBidResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/kava.auction.v1beta1.MsgPlaceBidResponse",
            value: exports.MsgPlaceBidResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map