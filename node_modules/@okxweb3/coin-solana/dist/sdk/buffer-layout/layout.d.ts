/// <reference types="node" />
export interface LayoutObject {
    [key: string]: any;
}
export declare function checkUint8Array(b: Uint8Array): void;
export declare function uint8ArrayToBuffer(b: Uint8Array): Buffer;
export declare abstract class Layout<T> {
    span: number;
    property?: string;
    boundConstructor_?: any;
    constructor(span: number, property?: string);
    makeDestinationObject(): LayoutObject;
    abstract decode(b: Uint8Array, offset?: number): T;
    abstract encode(src: T, b: Uint8Array, offset?: number): number;
    getSpan(b?: Uint8Array, offset?: number): number;
    replicate(property: string): this;
    fromArray(values: any[]): LayoutObject | undefined;
}
export declare function nameWithProperty(name: string, lo: {
    property?: string;
}): string;
export declare function bindConstructorLayout<T>(Class: any, layout: Layout<T>): void;
export declare abstract class ExternalLayout extends Layout<number> {
    isCount(): boolean;
}
export declare class GreedyCount extends ExternalLayout {
    elementSpan: number;
    constructor(elementSpan?: number, property?: string);
    isCount(): boolean;
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class OffsetLayout extends ExternalLayout {
    layout: Layout<number>;
    offset: number;
    constructor(layout: Layout<number>, offset?: number, property?: string);
    isCount(): boolean;
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class UInt extends Layout<number> {
    constructor(span: number, property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class UIntBE extends Layout<number> {
    constructor(span: number, property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class Int extends Layout<number> {
    constructor(span: number, property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class IntBE extends Layout<number> {
    constructor(span: number, property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class NearUInt64 extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class NearUInt64BE extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class NearInt64 extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class NearInt64BE extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class Float extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class FloatBE extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class Double extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class DoubleBE extends Layout<number> {
    constructor(property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class Sequence<T> extends Layout<T[]> {
    elementLayout: Layout<T>;
    count: number | ExternalLayout;
    constructor(elementLayout: Layout<T>, count: number | ExternalLayout, property?: string);
    getSpan(b: Uint8Array, offset?: number): number;
    decode(b: Uint8Array, offset?: number): T[];
    encode(src: T[], b: Uint8Array, offset?: number): number;
}
export declare class Structure<T> extends Layout<T> {
    fields: Layout<T[keyof T]>[];
    decodePrefixes: boolean;
    constructor(fields: Layout<T[keyof T]>[], property?: string, decodePrefixes?: boolean);
    getSpan(b: Uint8Array, offset?: number): number;
    decode(b: Uint8Array, offset?: number): T;
    encode(src: T, b: Uint8Array, offset?: number): number;
    fromArray(values: any[]): LayoutObject;
    offsetOf(property: string): number | undefined;
}
export declare class UnionDiscriminator<T = any> {
    property: string;
    constructor(property: string);
    decode(b?: Uint8Array, offset?: number): T;
    encode(src: T, b: Uint8Array, offset?: number): number;
}
export declare class UnionLayoutDiscriminator extends UnionDiscriminator<number> {
    layout: ExternalLayout;
    constructor(layout: ExternalLayout, property?: string);
    decode(b: Uint8Array, offset?: number): number;
    encode(src: number, b: Uint8Array, offset?: number): number;
}
export declare class Union extends Layout<LayoutObject> {
    property: string;
    discriminator: UnionDiscriminator;
    usesPrefixDiscriminator: boolean;
    defaultLayout: Layout<LayoutObject> | null;
    registry: {
        [key: number]: VariantLayout;
    };
    getSourceVariant: (src: LayoutObject) => VariantLayout | undefined;
    configGetSourceVariant: (getSourceVariant: (src: LayoutObject) => VariantLayout | undefined) => void;
    constructor(discr: Layout<LayoutObject> | UnionDiscriminator, defaultLayout: Layout<LayoutObject> | null, property: string);
    getSpan(b: Uint8Array, offset?: number): number;
    defaultGetSourceVariant(src: LayoutObject): VariantLayout | undefined;
    decode(b: Uint8Array, offset?: number): LayoutObject;
    encode(src: LayoutObject, b: Uint8Array, offset?: number): number;
    addVariant(variant: number, layout: Layout<LayoutObject>, property: string): VariantLayout;
    getVariant(vb: Uint8Array | number, offset?: number): VariantLayout | undefined;
}
export declare class VariantLayout extends Layout<LayoutObject> {
    property: string;
    union: Union;
    variant: number;
    layout: Layout<LayoutObject> | null;
    constructor(union: Union, variant: number, layout: Layout<LayoutObject> | null, property: string);
    getSpan(b: Uint8Array, offset?: number): number;
    decode(b: Uint8Array, offset?: number): LayoutObject;
    encode(src: LayoutObject, b: Uint8Array, offset?: number): number;
    fromArray(values: any[]): LayoutObject | undefined;
}
export declare class BitStructure extends Layout<LayoutObject> {
    fields: BitField[];
    word: UInt | UIntBE;
    msb: boolean;
    _packedSetValue: (v: number) => this;
    _packedGetValue: () => number;
    constructor(word: UInt | UIntBE, msb: boolean | string, property?: string);
    decode(b: Uint8Array, offset?: number): LayoutObject;
    encode(src: LayoutObject, b: Uint8Array, offset?: number): number;
    addField(bits: number, property: string): BitField;
    addBoolean(property: string): Boolean;
    fieldFor(property: string): BitField | undefined;
}
export declare class BitField {
    container: BitStructure;
    bits: number;
    valueMask: number;
    start: number;
    wordMask: number;
    property: string;
    constructor(container: BitStructure, bits: number, property: string);
    decode(b?: Uint8Array, offset?: number): unknown;
    encode(value: unknown): void;
}
export declare class Boolean extends BitField {
    constructor(container: BitStructure, property: string);
    decode(b?: Uint8Array, offset?: number): boolean;
    encode(value: number | boolean): void;
}
export declare class Blob extends Layout<Uint8Array> {
    length: number | ExternalLayout;
    constructor(length: number | ExternalLayout, property?: string);
    getSpan(b: Uint8Array, offset?: number): number;
    decode(b: Uint8Array, offset?: number): Uint8Array;
    encode(src: Uint8Array, b: Uint8Array, offset: number): number;
}
export declare class CString extends Layout<string> {
    constructor(property?: string);
    getSpan(b: Uint8Array, offset?: number): number;
    decode(b: Uint8Array, offset?: number): string;
    encode(src: string, b: Uint8Array, offset?: number): number;
}
export declare class UTF8 extends Layout<string> {
    maxSpan: number;
    constructor(maxSpan?: number | string, property?: string);
    getSpan(b: Uint8Array, offset?: number): number;
    decode(b: Uint8Array, offset?: number): string;
    encode(src: string | LayoutObject, b: Uint8Array, offset?: number): number;
}
export declare class Constant<T> extends Layout<T> {
    value: T;
    constructor(value: T, property?: string);
    decode(b?: Uint8Array, offset?: number): T;
    encode(src: T, b?: Uint8Array, offset?: number): number;
}
export declare const greedy: (elementSpan: number, property?: string) => GreedyCount;
export declare const offset: (layout: Layout<number>, offset?: number, property?: string) => OffsetLayout;
export declare const u8: (property?: string) => UInt;
export declare const u16: (property?: string) => UInt;
export declare const u24: (property?: string) => UInt;
export declare const u32: (property?: string) => UInt;
export declare const u40: (property?: string) => UInt;
export declare const u48: (property?: string) => UInt;
export declare const nu64: (property?: string) => NearUInt64;
export declare const u16be: (property?: string) => UIntBE;
export declare const u24be: (property?: string) => UIntBE;
export declare const u32be: (property?: string) => UIntBE;
export declare const u40be: (property?: string) => UIntBE;
export declare const u48be: (property?: string) => UIntBE;
export declare const nu64be: (property?: string) => NearUInt64BE;
export declare const s8: (property?: string) => Int;
export declare const s16: (property?: string) => Int;
export declare const s24: (property?: string) => Int;
export declare const s32: (property?: string) => Int;
export declare const s40: (property?: string) => Int;
export declare const s48: (property?: string) => Int;
export declare const ns64: (property?: string) => NearInt64;
export declare const s16be: (property?: string) => IntBE;
export declare const s24be: (property?: string) => IntBE;
export declare const s32be: (property?: string) => IntBE;
export declare const s40be: (property?: string) => IntBE;
export declare const s48be: (property?: string) => IntBE;
export declare const ns64be: (property?: string) => NearInt64BE;
export declare const f32: (property?: string) => Float;
export declare const f32be: (property?: string) => FloatBE;
export declare const f64: (property?: string) => Double;
export declare const f64be: (property?: string) => DoubleBE;
export declare const struct: <T>(fields: Layout<T[keyof T]>[], property?: string, decodePrefixes?: boolean) => Structure<T>;
export declare const bits: (word: UInt | UIntBE, msb: boolean | string, property?: string) => BitStructure;
export declare const seq: <T>(elementLayout: Layout<T>, count: number | ExternalLayout, property?: string) => Sequence<T>;
export declare const union: (discr: Layout<LayoutObject> | UnionDiscriminator, defaultLayout: Layout<LayoutObject> | null, property: string) => Union;
export declare const unionLayoutDiscriminator: (layout: ExternalLayout, property: string) => UnionLayoutDiscriminator;
export declare const blob: (length: number | ExternalLayout, property?: string) => Blob;
export declare const cstr: (property?: string) => CString;
export declare const utf8: (maxSpan: number, property?: string) => UTF8;
export declare const constant: <T>(value: T, property?: string) => Constant<T>;
