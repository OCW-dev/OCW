"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeBudgetProgram = exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = exports.ComputeBudgetInstruction = void 0;
const BufferLayout = __importStar(require("../../buffer-layout"));
const instruction_1 = require("../instruction");
const publickey_1 = require("../publickey");
const transaction_1 = require("../transaction");
const bigint_1 = require("../utils/bigint");
class ComputeBudgetInstruction {
    constructor() { }
    static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = BufferLayout.u8('instruction');
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type;
        for (const [ixType, layout] of Object.entries(exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {
            if (layout.index == typeIndex) {
                type = ixType;
                break;
            }
        }
        if (!type) {
            throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');
        }
        return type;
    }
    static decodeRequestUnits(instruction) {
        this.checkProgramId(instruction.programId);
        const { units, additionalFee } = (0, instruction_1.decodeData)(exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);
        return { units, additionalFee };
    }
    static decodeRequestHeapFrame(instruction) {
        this.checkProgramId(instruction.programId);
        const { bytes } = (0, instruction_1.decodeData)(exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);
        return { bytes };
    }
    static decodeSetComputeUnitLimit(instruction) {
        this.checkProgramId(instruction.programId);
        const { units } = (0, instruction_1.decodeData)(exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);
        return { units };
    }
    static decodeSetComputeUnitPrice(instruction) {
        this.checkProgramId(instruction.programId);
        const { microLamports } = (0, instruction_1.decodeData)(exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);
        return { microLamports };
    }
    static checkProgramId(programId) {
        if (!programId.equals(ComputeBudgetProgram.programId)) {
            throw new Error('invalid instruction; programId is not ComputeBudgetProgram');
        }
    }
}
exports.ComputeBudgetInstruction = ComputeBudgetInstruction;
exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({
    RequestUnits: {
        index: 0,
        layout: BufferLayout.struct([
            BufferLayout.u8('instruction'),
            BufferLayout.u32('units'),
            BufferLayout.u32('additionalFee'),
        ]),
    },
    RequestHeapFrame: {
        index: 1,
        layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),
    },
    SetComputeUnitLimit: {
        index: 2,
        layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),
    },
    SetComputeUnitPrice: {
        index: 3,
        layout: BufferLayout.struct([BufferLayout.u8('instruction'), (0, bigint_1.u64)('microLamports')]),
    },
});
class ComputeBudgetProgram {
    constructor() { }
    static requestUnits(params) {
        const type = exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;
        const data = (0, instruction_1.encodeData)(type, params);
        return new transaction_1.TransactionInstruction({
            keys: [],
            programId: this.programId,
            data,
        });
    }
    static requestHeapFrame(params) {
        const type = exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;
        const data = (0, instruction_1.encodeData)(type, params);
        return new transaction_1.TransactionInstruction({
            keys: [],
            programId: this.programId,
            data,
        });
    }
    static setComputeUnitLimit(params) {
        const type = exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;
        const data = (0, instruction_1.encodeData)(type, params);
        return new transaction_1.TransactionInstruction({
            keys: [],
            programId: this.programId,
            data,
        });
    }
    static setComputeUnitPrice(params) {
        const type = exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;
        const data = (0, instruction_1.encodeData)(type, {
            microLamports: BigInt(params.microLamports),
        });
        return new transaction_1.TransactionInstruction({
            keys: [],
            programId: this.programId,
            data,
        });
    }
}
exports.ComputeBudgetProgram = ComputeBudgetProgram;
ComputeBudgetProgram.programId = new publickey_1.PublicKey('ComputeBudget111111111111111111111111111111');
//# sourceMappingURL=compute-budget.js.map