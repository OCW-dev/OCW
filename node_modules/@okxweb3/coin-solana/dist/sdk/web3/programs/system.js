"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemProgram = exports.SYSTEM_INSTRUCTION_LAYOUTS = exports.SystemInstruction = void 0;
const BufferLayout = __importStar(require("../../buffer-layout"));
const instruction_1 = require("../instruction");
const Layout = __importStar(require("../layout"));
const nonce_account_1 = require("../nonce-account");
const publickey_1 = require("../publickey");
const sysvar_1 = require("../sysvar");
const transaction_1 = require("../transaction");
const to_buffer_1 = require("../utils/to-buffer");
const bigint_1 = require("../utils/bigint");
class SystemInstruction {
    constructor() { }
    static decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        const instructionTypeLayout = BufferLayout.u32('instruction');
        const typeIndex = instructionTypeLayout.decode(instruction.data);
        let type;
        for (const [ixType, layout] of Object.entries(exports.SYSTEM_INSTRUCTION_LAYOUTS)) {
            if (layout.index == typeIndex) {
                type = ixType;
                break;
            }
        }
        if (!type) {
            throw new Error('Instruction type incorrect; not a SystemInstruction');
        }
        return type;
    }
    static decodeCreateAccount(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const { lamports, space, programId } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);
        return {
            fromPubkey: instruction.keys[0].pubkey,
            newAccountPubkey: instruction.keys[1].pubkey,
            lamports,
            space,
            programId: new publickey_1.PublicKey(programId),
        };
    }
    static decodeTransfer(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const { lamports } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);
        return {
            fromPubkey: instruction.keys[0].pubkey,
            toPubkey: instruction.keys[1].pubkey,
            lamports,
        };
    }
    static decodeTransferWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const { lamports, seed, programId } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);
        return {
            fromPubkey: instruction.keys[0].pubkey,
            basePubkey: instruction.keys[1].pubkey,
            toPubkey: instruction.keys[2].pubkey,
            lamports,
            seed,
            programId: new publickey_1.PublicKey(programId),
        };
    }
    static decodeAllocate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const { space } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);
        return {
            accountPubkey: instruction.keys[0].pubkey,
            space,
        };
    }
    static decodeAllocateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const { base, seed, space, programId } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);
        return {
            accountPubkey: instruction.keys[0].pubkey,
            basePubkey: new publickey_1.PublicKey(base),
            seed,
            space,
            programId: new publickey_1.PublicKey(programId),
        };
    }
    static decodeAssign(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const { programId } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);
        return {
            accountPubkey: instruction.keys[0].pubkey,
            programId: new publickey_1.PublicKey(programId),
        };
    }
    static decodeAssignWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);
        const { base, seed, programId } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);
        return {
            accountPubkey: instruction.keys[0].pubkey,
            basePubkey: new publickey_1.PublicKey(base),
            seed,
            programId: new publickey_1.PublicKey(programId),
        };
    }
    static decodeCreateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const { base, seed, lamports, space, programId } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);
        return {
            fromPubkey: instruction.keys[0].pubkey,
            newAccountPubkey: instruction.keys[1].pubkey,
            basePubkey: new publickey_1.PublicKey(base),
            seed,
            lamports,
            space,
            programId: new publickey_1.PublicKey(programId),
        };
    }
    static decodeNonceInitialize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        const { authorized } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);
        return {
            noncePubkey: instruction.keys[0].pubkey,
            authorizedPubkey: new publickey_1.PublicKey(authorized),
        };
    }
    static decodeNonceAdvance(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);
        return {
            noncePubkey: instruction.keys[0].pubkey,
            authorizedPubkey: instruction.keys[2].pubkey,
        };
    }
    static decodeNonceWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 5);
        const { lamports } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);
        return {
            noncePubkey: instruction.keys[0].pubkey,
            toPubkey: instruction.keys[1].pubkey,
            authorizedPubkey: instruction.keys[4].pubkey,
            lamports,
        };
    }
    static decodeNonceAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);
        const { authorized } = (0, instruction_1.decodeData)(exports.SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);
        return {
            noncePubkey: instruction.keys[0].pubkey,
            authorizedPubkey: instruction.keys[1].pubkey,
            newAuthorizedPubkey: new publickey_1.PublicKey(authorized),
        };
    }
    static checkProgramId(programId) {
        if (!programId.equals(SystemProgram.programId)) {
            throw new Error('invalid instruction; programId is not SystemProgram');
        }
    }
    static checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
            throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
        }
    }
}
exports.SystemInstruction = SystemInstruction;
exports.SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({
    Create: {
        index: 0,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            BufferLayout.ns64('lamports'),
            BufferLayout.ns64('space'),
            Layout.publicKey('programId'),
        ]),
    },
    Assign: {
        index: 1,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            Layout.publicKey('programId'),
        ]),
    },
    Transfer: {
        index: 2,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            (0, bigint_1.u64)('lamports'),
        ]),
    },
    CreateWithSeed: {
        index: 3,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            Layout.publicKey('base'),
            Layout.rustString('seed'),
            BufferLayout.ns64('lamports'),
            BufferLayout.ns64('space'),
            Layout.publicKey('programId'),
        ]),
    },
    AdvanceNonceAccount: {
        index: 4,
        layout: BufferLayout.struct([BufferLayout.u32('instruction')]),
    },
    WithdrawNonceAccount: {
        index: 5,
        layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),
    },
    InitializeNonceAccount: {
        index: 6,
        layout: BufferLayout.struct([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),
    },
    AuthorizeNonceAccount: {
        index: 7,
        layout: BufferLayout.struct([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),
    },
    Allocate: {
        index: 8,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            BufferLayout.ns64('space'),
        ]),
    },
    AllocateWithSeed: {
        index: 9,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            Layout.publicKey('base'),
            Layout.rustString('seed'),
            BufferLayout.ns64('space'),
            Layout.publicKey('programId'),
        ]),
    },
    AssignWithSeed: {
        index: 10,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            Layout.publicKey('base'),
            Layout.rustString('seed'),
            Layout.publicKey('programId'),
        ]),
    },
    TransferWithSeed: {
        index: 11,
        layout: BufferLayout.struct([
            BufferLayout.u32('instruction'),
            (0, bigint_1.u64)('lamports'),
            Layout.rustString('seed'),
            Layout.publicKey('programId'),
        ]),
    },
    UpgradeNonceAccount: {
        index: 12,
        layout: BufferLayout.struct([BufferLayout.u32('instruction')]),
    },
});
class SystemProgram {
    constructor() { }
    static createAccount(params) {
        const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.Create;
        const data = (0, instruction_1.encodeData)(type, {
            lamports: params.lamports,
            space: params.space,
            programId: (0, to_buffer_1.toBuffer)(params.programId.toBuffer()),
        });
        return new transaction_1.TransactionInstruction({
            keys: [
                { pubkey: params.fromPubkey, isSigner: true, isWritable: true },
                { pubkey: params.newAccountPubkey, isSigner: true, isWritable: true },
            ],
            programId: this.programId,
            data,
        });
    }
    static transfer(params) {
        let data;
        let keys;
        if ('basePubkey' in params) {
            const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;
            data = (0, instruction_1.encodeData)(type, {
                lamports: BigInt(params.lamports),
                seed: params.seed,
                programId: (0, to_buffer_1.toBuffer)(params.programId.toBuffer()),
            });
            keys = [
                { pubkey: params.fromPubkey, isSigner: false, isWritable: true },
                { pubkey: params.basePubkey, isSigner: true, isWritable: false },
                { pubkey: params.toPubkey, isSigner: false, isWritable: true },
            ];
        }
        else {
            const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
            data = (0, instruction_1.encodeData)(type, { lamports: BigInt(params.lamports) });
            keys = [
                { pubkey: params.fromPubkey, isSigner: true, isWritable: true },
                { pubkey: params.toPubkey, isSigner: false, isWritable: true },
            ];
        }
        return new transaction_1.TransactionInstruction({
            keys,
            programId: this.programId,
            data,
        });
    }
    static assign(params) {
        let data;
        let keys;
        if ('basePubkey' in params) {
            const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;
            data = (0, instruction_1.encodeData)(type, {
                base: (0, to_buffer_1.toBuffer)(params.basePubkey.toBuffer()),
                seed: params.seed,
                programId: (0, to_buffer_1.toBuffer)(params.programId.toBuffer()),
            });
            keys = [
                { pubkey: params.accountPubkey, isSigner: false, isWritable: true },
                { pubkey: params.basePubkey, isSigner: true, isWritable: false },
            ];
        }
        else {
            const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.Assign;
            data = (0, instruction_1.encodeData)(type, {
                programId: (0, to_buffer_1.toBuffer)(params.programId.toBuffer()),
            });
            keys = [{ pubkey: params.accountPubkey, isSigner: true, isWritable: true }];
        }
        return new transaction_1.TransactionInstruction({
            keys,
            programId: this.programId,
            data,
        });
    }
    static createAccountWithSeed(params) {
        const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;
        const data = (0, instruction_1.encodeData)(type, {
            base: (0, to_buffer_1.toBuffer)(params.basePubkey.toBuffer()),
            seed: params.seed,
            lamports: params.lamports,
            space: params.space,
            programId: (0, to_buffer_1.toBuffer)(params.programId.toBuffer()),
        });
        let keys = [
            { pubkey: params.fromPubkey, isSigner: true, isWritable: true },
            { pubkey: params.newAccountPubkey, isSigner: false, isWritable: true },
        ];
        if (params.basePubkey != params.fromPubkey) {
            keys.push({
                pubkey: params.basePubkey,
                isSigner: true,
                isWritable: false,
            });
        }
        return new transaction_1.TransactionInstruction({
            keys,
            programId: this.programId,
            data,
        });
    }
    static createNonceAccount(params) {
        const transaction = new transaction_1.Transaction();
        if ('basePubkey' in params && 'seed' in params) {
            transaction.add(SystemProgram.createAccountWithSeed({
                fromPubkey: params.fromPubkey,
                newAccountPubkey: params.noncePubkey,
                basePubkey: params.basePubkey,
                seed: params.seed,
                lamports: params.lamports,
                space: nonce_account_1.NONCE_ACCOUNT_LENGTH,
                programId: this.programId,
            }));
        }
        else {
            transaction.add(SystemProgram.createAccount({
                fromPubkey: params.fromPubkey,
                newAccountPubkey: params.noncePubkey,
                lamports: params.lamports,
                space: nonce_account_1.NONCE_ACCOUNT_LENGTH,
                programId: this.programId,
            }));
        }
        const initParams = {
            noncePubkey: params.noncePubkey,
            authorizedPubkey: params.authorizedPubkey,
        };
        transaction.add(this.nonceInitialize(initParams));
        return transaction;
    }
    static nonceInitialize(params) {
        const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;
        const data = (0, instruction_1.encodeData)(type, {
            authorized: (0, to_buffer_1.toBuffer)(params.authorizedPubkey.toBuffer()),
        });
        const instructionData = {
            keys: [
                { pubkey: params.noncePubkey, isSigner: false, isWritable: true },
                {
                    pubkey: sysvar_1.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
                    isSigner: false,
                    isWritable: false,
                },
                { pubkey: sysvar_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },
            ],
            programId: this.programId,
            data,
        };
        return new transaction_1.TransactionInstruction(instructionData);
    }
    static nonceAdvance(params) {
        const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;
        const data = (0, instruction_1.encodeData)(type);
        const instructionData = {
            keys: [
                { pubkey: params.noncePubkey, isSigner: false, isWritable: true },
                {
                    pubkey: sysvar_1.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
                    isSigner: false,
                    isWritable: false,
                },
                { pubkey: params.authorizedPubkey, isSigner: true, isWritable: false },
            ],
            programId: this.programId,
            data,
        };
        return new transaction_1.TransactionInstruction(instructionData);
    }
    static nonceWithdraw(params) {
        const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;
        const data = (0, instruction_1.encodeData)(type, { lamports: params.lamports });
        return new transaction_1.TransactionInstruction({
            keys: [
                { pubkey: params.noncePubkey, isSigner: false, isWritable: true },
                { pubkey: params.toPubkey, isSigner: false, isWritable: true },
                {
                    pubkey: sysvar_1.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
                    isSigner: false,
                    isWritable: false,
                },
                {
                    pubkey: sysvar_1.SYSVAR_RENT_PUBKEY,
                    isSigner: false,
                    isWritable: false,
                },
                { pubkey: params.authorizedPubkey, isSigner: true, isWritable: false },
            ],
            programId: this.programId,
            data,
        });
    }
    static nonceAuthorize(params) {
        const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;
        const data = (0, instruction_1.encodeData)(type, {
            authorized: (0, to_buffer_1.toBuffer)(params.newAuthorizedPubkey.toBuffer()),
        });
        return new transaction_1.TransactionInstruction({
            keys: [
                { pubkey: params.noncePubkey, isSigner: false, isWritable: true },
                { pubkey: params.authorizedPubkey, isSigner: true, isWritable: false },
            ],
            programId: this.programId,
            data,
        });
    }
    static allocate(params) {
        let data;
        let keys;
        if ('basePubkey' in params) {
            const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;
            data = (0, instruction_1.encodeData)(type, {
                base: (0, to_buffer_1.toBuffer)(params.basePubkey.toBuffer()),
                seed: params.seed,
                space: params.space,
                programId: (0, to_buffer_1.toBuffer)(params.programId.toBuffer()),
            });
            keys = [
                { pubkey: params.accountPubkey, isSigner: false, isWritable: true },
                { pubkey: params.basePubkey, isSigner: true, isWritable: false },
            ];
        }
        else {
            const type = exports.SYSTEM_INSTRUCTION_LAYOUTS.Allocate;
            data = (0, instruction_1.encodeData)(type, {
                space: params.space,
            });
            keys = [{ pubkey: params.accountPubkey, isSigner: true, isWritable: true }];
        }
        return new transaction_1.TransactionInstruction({
            keys,
            programId: this.programId,
            data,
        });
    }
}
exports.SystemProgram = SystemProgram;
SystemProgram.programId = new publickey_1.PublicKey('11111111111111111111111111111111');
//# sourceMappingURL=system.js.map