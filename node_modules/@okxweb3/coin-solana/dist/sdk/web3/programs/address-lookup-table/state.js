"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressLookupTableAccount = void 0;
const BufferLayout = __importStar(require("../../../buffer-layout"));
const assert_1 = __importDefault(require("../../utils/assert"));
const Layout = __importStar(require("../../layout"));
const publickey_1 = require("../../publickey");
const bigint_1 = require("../../utils/bigint");
const account_data_1 = require("../../account-data");
const LOOKUP_TABLE_META_SIZE = 56;
class AddressLookupTableAccount {
    constructor(args) {
        this.key = args.key;
        this.state = args.state;
    }
    isActive() {
        const U64_MAX = BigInt('0xffffffffffffffff');
        return this.state.deactivationSlot === U64_MAX;
    }
    static deserialize(accountData) {
        const meta = (0, account_data_1.decodeData)(LookupTableMetaLayout, accountData);
        const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;
        (0, assert_1.default)(serializedAddressesLen >= 0, 'lookup table is invalid');
        (0, assert_1.default)(serializedAddressesLen % 32 === 0, 'lookup table is invalid');
        const numSerializedAddresses = serializedAddressesLen / 32;
        const { addresses } = BufferLayout.struct([
            BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),
        ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));
        return {
            deactivationSlot: meta.deactivationSlot,
            lastExtendedSlot: meta.lastExtendedSlot,
            lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,
            authority: meta.authority.length !== 0
                ? new publickey_1.PublicKey(meta.authority[0])
                : undefined,
            addresses: addresses.map(address => new publickey_1.PublicKey(address)),
        };
    }
}
exports.AddressLookupTableAccount = AddressLookupTableAccount;
const LookupTableMetaLayout = {
    index: 1,
    layout: BufferLayout.struct([
        BufferLayout.u32('typeIndex'),
        (0, bigint_1.u64)('deactivationSlot'),
        BufferLayout.nu64('lastExtendedSlot'),
        BufferLayout.u8('lastExtendedStartIndex'),
        BufferLayout.u8(),
        BufferLayout.seq(Layout.publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority'),
    ]),
};
//# sourceMappingURL=state.js.map