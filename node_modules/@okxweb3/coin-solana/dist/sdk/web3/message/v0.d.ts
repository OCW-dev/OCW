import { Blockhash } from '../blockhash';
import { MessageHeader, MessageAddressTableLookup, MessageCompiledInstruction } from './index';
import { PublicKey } from '../publickey';
import { TransactionInstruction } from '../transaction';
import { AddressLookupTableAccount } from '../programs';
import { AccountKeysFromLookups, MessageAccountKeys } from './account-keys';
export type MessageV0Args = {
    header: MessageHeader;
    staticAccountKeys: PublicKey[];
    recentBlockhash: Blockhash;
    compiledInstructions: MessageCompiledInstruction[];
    addressTableLookups: MessageAddressTableLookup[];
};
export type CompileV0Args = {
    payerKey: PublicKey;
    instructions: Array<TransactionInstruction>;
    recentBlockhash: Blockhash;
    addressLookupTableAccounts?: Array<AddressLookupTableAccount>;
};
export type GetAccountKeysArgs = {
    accountKeysFromLookups?: AccountKeysFromLookups | null;
} | {
    addressLookupTableAccounts?: AddressLookupTableAccount[] | null;
};
export declare class MessageV0 {
    header: MessageHeader;
    staticAccountKeys: Array<PublicKey>;
    recentBlockhash: Blockhash;
    compiledInstructions: Array<MessageCompiledInstruction>;
    addressTableLookups: Array<MessageAddressTableLookup>;
    constructor(args: MessageV0Args);
    get version(): 0;
    get numAccountKeysFromLookups(): number;
    getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys;
    isAccountSigner(index: number): boolean;
    isAccountWritable(index: number): boolean;
    resolveAddressTableLookups(addressLookupTableAccounts: AddressLookupTableAccount[]): AccountKeysFromLookups;
    static compile(args: CompileV0Args): MessageV0;
    serialize(): Uint8Array;
    private serializeInstructions;
    private serializeAddressTableLookups;
    static deserialize(serializedMessage: Uint8Array): MessageV0;
}
