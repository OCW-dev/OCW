"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageAccountKeys = void 0;
class MessageAccountKeys {
    constructor(staticAccountKeys, accountKeysFromLookups) {
        this.staticAccountKeys = staticAccountKeys;
        this.accountKeysFromLookups = accountKeysFromLookups;
    }
    keySegments() {
        const keySegments = [this.staticAccountKeys];
        if (this.accountKeysFromLookups) {
            keySegments.push(this.accountKeysFromLookups.writable);
            keySegments.push(this.accountKeysFromLookups.readonly);
        }
        return keySegments;
    }
    get(index) {
        for (const keySegment of this.keySegments()) {
            if (index < keySegment.length) {
                return keySegment[index];
            }
            else {
                index -= keySegment.length;
            }
        }
        return;
    }
    get length() {
        return this.keySegments().flat().length;
    }
    compileInstructions(instructions) {
        const U8_MAX = 255;
        if (this.length > U8_MAX + 1) {
            throw new Error('Account index overflow encountered during compilation');
        }
        const keyIndexMap = new Map();
        this.keySegments()
            .flat()
            .forEach((key, index) => {
            keyIndexMap.set(key.toBase58(), index);
        });
        const findKeyIndex = (key) => {
            const keyIndex = keyIndexMap.get(key.toBase58());
            if (keyIndex === undefined)
                throw new Error('Encountered an unknown instruction account key during compilation');
            return keyIndex;
        };
        return instructions.map((instruction) => {
            return {
                programIdIndex: findKeyIndex(instruction.programId),
                accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),
                data: instruction.data,
            };
        });
    }
}
exports.MessageAccountKeys = MessageAccountKeys;
//# sourceMappingURL=account-keys.js.map