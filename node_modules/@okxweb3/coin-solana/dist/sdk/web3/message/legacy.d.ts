/// <reference types="node" />
import { PublicKey } from '../publickey';
import type { Blockhash } from '../blockhash';
import { MessageHeader, MessageAddressTableLookup, MessageCompiledInstruction } from './index';
import { TransactionInstruction } from '../transaction';
import { MessageAccountKeys } from './account-keys';
export type CompiledInstruction = {
    programIdIndex: number;
    accounts: number[];
    data: string;
};
export type MessageArgs = {
    header: MessageHeader;
    accountKeys: string[] | PublicKey[];
    recentBlockhash: Blockhash;
    instructions: CompiledInstruction[];
};
export type CompileLegacyArgs = {
    payerKey: PublicKey;
    instructions: Array<TransactionInstruction>;
    recentBlockhash: Blockhash;
};
export declare class Message {
    header: MessageHeader;
    accountKeys: PublicKey[];
    recentBlockhash: Blockhash;
    instructions: CompiledInstruction[];
    private indexToProgramIds;
    constructor(args: MessageArgs);
    get version(): 'legacy';
    get staticAccountKeys(): Array<PublicKey>;
    get compiledInstructions(): Array<MessageCompiledInstruction>;
    get addressTableLookups(): Array<MessageAddressTableLookup>;
    getAccountKeys(): MessageAccountKeys;
    static compile(args: CompileLegacyArgs): Message;
    isAccountSigner(index: number): boolean;
    isAccountWritable(index: number): boolean;
    isProgramId(index: number): boolean;
    programIds(): PublicKey[];
    nonProgramIds(): PublicKey[];
    serialize(): Buffer;
    static from(buffer: Buffer | Uint8Array | Array<number>): Message;
}
