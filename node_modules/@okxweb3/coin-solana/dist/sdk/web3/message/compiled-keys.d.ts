import { MessageHeader, MessageAddressTableLookup } from './index';
import { AccountKeysFromLookups } from './account-keys';
import { AddressLookupTableAccount } from '../programs';
import { TransactionInstruction } from '../transaction';
import { PublicKey } from '../publickey';
export type CompiledKeyMeta = {
    isSigner: boolean;
    isWritable: boolean;
    isInvoked: boolean;
};
type KeyMetaMap = Map<string, CompiledKeyMeta>;
export declare class CompiledKeys {
    payer: PublicKey;
    keyMetaMap: KeyMetaMap;
    constructor(payer: PublicKey, keyMetaMap: KeyMetaMap);
    static compile(instructions: Array<TransactionInstruction>, payer: PublicKey): CompiledKeys;
    getMessageComponents(): [MessageHeader, Array<PublicKey>];
    extractTableLookup(lookupTable: AddressLookupTableAccount): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined;
    private drainKeysFoundInLookupTable;
}
export {};
