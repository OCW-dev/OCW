/// <reference types="node" />
import { BN } from '@okxweb3/crypto-lib';
import { Struct } from './utils/borsh-schema';
export declare const MAX_SEED_LENGTH = 32;
export declare const PUBLIC_KEY_LENGTH = 32;
export type PublicKeyInitData = number | string | Uint8Array | Array<number> | PublicKeyData;
export type PublicKeyData = {
    _bn: BN;
};
export declare class PublicKey extends Struct {
    _bn: BN;
    constructor(value: PublicKeyInitData);
    static unique(): PublicKey;
    static default: PublicKey;
    equals(publicKey: PublicKey): boolean;
    toBase58(): string;
    toJSON(): string;
    toBytes(): Uint8Array;
    toBuffer(): Buffer;
    get [Symbol.toStringTag](): string;
    toString(): string;
    static createWithSeed(fromPublicKey: PublicKey, seed: string, programId: PublicKey): Promise<PublicKey>;
    static createProgramAddressSync(seeds: Array<Buffer | Uint8Array>, programId: PublicKey): PublicKey;
    static createProgramAddress(seeds: Array<Buffer | Uint8Array>, programId: PublicKey): Promise<PublicKey>;
    static findProgramAddressSync(seeds: Array<Buffer | Uint8Array>, programId: PublicKey): [PublicKey, number];
    static findProgramAddress(seeds: Array<Buffer | Uint8Array>, programId: PublicKey): Promise<[PublicKey, number]>;
    static isOnCurve(pubkeyData: PublicKeyInitData): boolean;
}
