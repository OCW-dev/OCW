"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SOLANA_SCHEMA = exports.Enum = exports.Struct = void 0;
const buffer_1 = require("buffer");
const borsh_1 = require("borsh");
class Struct {
    constructor(properties) {
        Object.assign(this, properties);
    }
    encode() {
        return buffer_1.Buffer.from((0, borsh_1.serialize)(exports.SOLANA_SCHEMA, this));
    }
    static decode(data) {
        return (0, borsh_1.deserialize)(exports.SOLANA_SCHEMA, this, data);
    }
    static decodeUnchecked(data) {
        return (0, borsh_1.deserializeUnchecked)(exports.SOLANA_SCHEMA, this, data);
    }
}
exports.Struct = Struct;
class Enum extends Struct {
    constructor(properties) {
        super(properties);
        this.enum = '';
        if (Object.keys(properties).length !== 1) {
            throw new Error('Enum can only take single value');
        }
        Object.keys(properties).map(key => {
            this.enum = key;
        });
    }
}
exports.Enum = Enum;
exports.SOLANA_SCHEMA = new Map();
//# sourceMappingURL=borsh-schema.js.map