"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonceAccount = exports.NONCE_ACCOUNT_LENGTH = void 0;
const BufferLayout = __importStar(require("../buffer-layout"));
const Layout = __importStar(require("./layout"));
const publickey_1 = require("./publickey");
const fee_calculator_1 = require("./fee-calculator");
const to_buffer_1 = require("./utils/to-buffer");
const NonceAccountLayout = BufferLayout.struct([
    BufferLayout.u32('version'),
    BufferLayout.u32('state'),
    Layout.publicKey('authorizedPubkey'),
    Layout.publicKey('nonce'),
    BufferLayout.struct([fee_calculator_1.FeeCalculatorLayout], 'feeCalculator'),
]);
exports.NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;
class NonceAccount {
    constructor(args) {
        this.authorizedPubkey = args.authorizedPubkey;
        this.nonce = args.nonce;
        this.feeCalculator = args.feeCalculator;
    }
    static fromAccountData(buffer) {
        const nonceAccount = NonceAccountLayout.decode((0, to_buffer_1.toBuffer)(buffer), 0);
        return new NonceAccount({
            authorizedPubkey: new publickey_1.PublicKey(nonceAccount.authorizedPubkey),
            nonce: new publickey_1.PublicKey(nonceAccount.nonce).toString(),
            feeCalculator: nonceAccount.feeCalculator,
        });
    }
}
exports.NonceAccount = NonceAccount;
//# sourceMappingURL=nonce-account.js.map