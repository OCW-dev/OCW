"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionExpiredNonceInvalidError = exports.TransactionExpiredTimeoutError = exports.TransactionExpiredBlockheightExceededError = void 0;
class TransactionExpiredBlockheightExceededError extends Error {
    constructor(signature) {
        super(`Signature ${signature} has expired: block height exceeded.`);
        this.signature = signature;
    }
}
exports.TransactionExpiredBlockheightExceededError = TransactionExpiredBlockheightExceededError;
Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {
    value: 'TransactionExpiredBlockheightExceededError',
});
class TransactionExpiredTimeoutError extends Error {
    constructor(signature, timeoutSeconds) {
        super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` +
            'unknown if it succeeded or failed. Check signature ' +
            `${signature} using the Solana Explorer or CLI tools.`);
        this.signature = signature;
    }
}
exports.TransactionExpiredTimeoutError = TransactionExpiredTimeoutError;
Object.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {
    value: 'TransactionExpiredTimeoutError',
});
class TransactionExpiredNonceInvalidError extends Error {
    constructor(signature) {
        super(`Signature ${signature} has expired: the nonce is no longer valid.`);
        this.signature = signature;
    }
}
exports.TransactionExpiredNonceInvalidError = TransactionExpiredNonceInvalidError;
Object.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {
    value: 'TransactionExpiredNonceInvalidError',
});
//# sourceMappingURL=expiry-custom-errors.js.map