import { AccountMeta, PublicKey, Signer, TransactionInstruction } from '../../web3';
import { TokenInstruction } from './types';
export interface BurnInstructionData {
    instruction: TokenInstruction.Burn;
    amount: bigint;
}
export declare const burnInstructionData: import("../../buffer-layout").Structure<BurnInstructionData>;
export declare function createBurnInstruction(account: PublicKey, mint: PublicKey, owner: PublicKey, amount: number | bigint, multiSigners?: (Signer | PublicKey)[], programId?: PublicKey): TransactionInstruction;
export interface DecodedBurnInstruction {
    programId: PublicKey;
    keys: {
        account: AccountMeta;
        mint: AccountMeta;
        owner: AccountMeta;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: TokenInstruction.Burn;
        amount: bigint;
    };
}
export declare function decodeBurnInstruction(instruction: TransactionInstruction, programId?: PublicKey): DecodedBurnInstruction;
export interface DecodedBurnInstructionUnchecked {
    programId: PublicKey;
    keys: {
        account: AccountMeta | undefined;
        mint: AccountMeta | undefined;
        owner: AccountMeta | undefined;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: number;
        amount: bigint;
    };
}
export declare function decodeBurnInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }: TransactionInstruction): DecodedBurnInstructionUnchecked;
