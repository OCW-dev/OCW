import { AccountMeta, PublicKey, Signer, TransactionInstruction } from '../../web3';
import { TokenInstruction } from './types';
export interface MintToInstructionData {
    instruction: TokenInstruction.MintTo;
    amount: bigint;
}
export declare const mintToInstructionData: import("../../buffer-layout").Structure<MintToInstructionData>;
export declare function createMintToInstruction(mint: PublicKey, destination: PublicKey, authority: PublicKey, amount: number | bigint, multiSigners?: (Signer | PublicKey)[], programId?: PublicKey): TransactionInstruction;
export interface DecodedMintToInstruction {
    programId: PublicKey;
    keys: {
        mint: AccountMeta;
        destination: AccountMeta;
        authority: AccountMeta;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: TokenInstruction.MintTo;
        amount: bigint;
    };
}
export declare function decodeMintToInstruction(instruction: TransactionInstruction, programId?: PublicKey): DecodedMintToInstruction;
export interface DecodedMintToInstructionUnchecked {
    programId: PublicKey;
    keys: {
        mint: AccountMeta | undefined;
        destination: AccountMeta | undefined;
        authority: AccountMeta | undefined;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: number;
        amount: bigint;
    };
}
export declare function decodeMintToInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }: TransactionInstruction): DecodedMintToInstructionUnchecked;
