import { AccountMeta, PublicKey, Signer, TransactionInstruction } from '../../web3';
import { TokenInstruction } from './types';
export interface BurnCheckedInstructionData {
    instruction: TokenInstruction.BurnChecked;
    amount: bigint;
    decimals: number;
}
export declare const burnCheckedInstructionData: import("../../buffer-layout").Structure<BurnCheckedInstructionData>;
export declare function createBurnCheckedInstruction(account: PublicKey, mint: PublicKey, owner: PublicKey, amount: number | bigint, decimals: number, multiSigners?: (Signer | PublicKey)[], programId?: PublicKey): TransactionInstruction;
export interface DecodedBurnCheckedInstruction {
    programId: PublicKey;
    keys: {
        account: AccountMeta;
        mint: AccountMeta;
        owner: AccountMeta;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: TokenInstruction.BurnChecked;
        amount: bigint;
        decimals: number;
    };
}
export declare function decodeBurnCheckedInstruction(instruction: TransactionInstruction, programId?: PublicKey): DecodedBurnCheckedInstruction;
export interface DecodedBurnCheckedInstructionUnchecked {
    programId: PublicKey;
    keys: {
        account: AccountMeta | undefined;
        mint: AccountMeta | undefined;
        owner: AccountMeta | undefined;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: number;
        amount: bigint;
        decimals: number;
    };
}
export declare function decodeBurnCheckedInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }: TransactionInstruction): DecodedBurnCheckedInstructionUnchecked;
