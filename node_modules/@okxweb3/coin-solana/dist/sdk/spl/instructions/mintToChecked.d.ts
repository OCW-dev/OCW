import { AccountMeta, PublicKey, Signer, TransactionInstruction } from '../../web3';
import { TokenInstruction } from './types';
export interface MintToCheckedInstructionData {
    instruction: TokenInstruction.MintToChecked;
    amount: bigint;
    decimals: number;
}
export declare const mintToCheckedInstructionData: import("../../buffer-layout").Structure<MintToCheckedInstructionData>;
export declare function createMintToCheckedInstruction(mint: PublicKey, destination: PublicKey, authority: PublicKey, amount: number | bigint, decimals: number, multiSigners?: (Signer | PublicKey)[], programId?: PublicKey): TransactionInstruction;
export interface DecodedMintToCheckedInstruction {
    programId: PublicKey;
    keys: {
        mint: AccountMeta;
        destination: AccountMeta;
        authority: AccountMeta;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: TokenInstruction.MintToChecked;
        amount: bigint;
        decimals: number;
    };
}
export declare function decodeMintToCheckedInstruction(instruction: TransactionInstruction, programId?: PublicKey): DecodedMintToCheckedInstruction;
export interface DecodedMintToCheckedInstructionUnchecked {
    programId: PublicKey;
    keys: {
        mint: AccountMeta | undefined;
        destination: AccountMeta | undefined;
        authority: AccountMeta | undefined;
        multiSigners: AccountMeta[];
    };
    data: {
        instruction: number;
        amount: bigint;
        decimals: number;
    };
}
export declare function decodeMintToCheckedInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }: TransactionInstruction): DecodedMintToCheckedInstructionUnchecked;
