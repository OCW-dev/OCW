"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetadataDelegateRecord = exports.getTokenRecord = exports.getAssociatedTokenAccount = exports.getMasterEdition = exports.getMetadata = void 0;
const buffer_1 = require("buffer");
const mpl_token_metadata_1 = require("../../mpl-token-metadata");
const types_1 = require("../../types");
const DelegateType_1 = require("./DelegateType");
const getMetadata = (mint) => {
    const programId = mpl_token_metadata_1.PROGRAM_ID;
    return types_1.Pda.find(programId, [
        buffer_1.Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        mint.toBuffer(),
    ]);
};
exports.getMetadata = getMetadata;
const getMasterEdition = (mint) => {
    const programId = mpl_token_metadata_1.PROGRAM_ID;
    return types_1.Pda.find(programId, [
        buffer_1.Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        mint.toBuffer(),
        buffer_1.Buffer.from('edition', 'utf8'),
    ]);
};
exports.getMasterEdition = getMasterEdition;
const getAssociatedTokenAccount = (input) => {
    return types_1.Pda.find(types_1.associatedTokenProgram.address, [
        input.owner.toBuffer(),
        types_1.tokenProgram.address.toBuffer(),
        input.mint.toBuffer(),
    ]);
};
exports.getAssociatedTokenAccount = getAssociatedTokenAccount;
const getTokenRecord = (input) => {
    const programId = mpl_token_metadata_1.PROGRAM_ID;
    return types_1.Pda.find(programId, [
        buffer_1.Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        input.mint.toBuffer(),
        buffer_1.Buffer.from('token_record', 'utf8'),
        input.token.toBuffer(),
    ]);
};
exports.getTokenRecord = getTokenRecord;
const getMetadataDelegateRecord = (input) => {
    const programId = mpl_token_metadata_1.PROGRAM_ID;
    return types_1.Pda.find(programId, [
        buffer_1.Buffer.from('metadata', 'utf8'),
        programId.toBuffer(),
        input.mint.toBuffer(),
        buffer_1.Buffer.from((0, DelegateType_1.getMetadataDelegateRoleSeed)(input.type), 'utf8'),
        input.updateAuthority.toBuffer(),
        input.delegate.toBuffer(),
    ]);
};
exports.getMetadataDelegateRecord = getMetadataDelegateRecord;
//# sourceMappingURL=pdas.js.map