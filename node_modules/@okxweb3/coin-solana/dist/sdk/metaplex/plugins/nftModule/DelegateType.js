"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultDelegateArgs = exports.getMetadataDelegateRoleSeed = exports.getMetadataDelegateRole = exports.getTokenDelegateRole = void 0;
const mpl_token_metadata_1 = require("../../mpl-token-metadata");
const tokenDelegateRoleMap = {
    StandardV1: mpl_token_metadata_1.TokenDelegateRole.Standard,
    TransferV1: mpl_token_metadata_1.TokenDelegateRole.Transfer,
    LockedTransferV1: mpl_token_metadata_1.TokenDelegateRole.LockedTransfer,
    SaleV1: mpl_token_metadata_1.TokenDelegateRole.Sale,
    UtilityV1: mpl_token_metadata_1.TokenDelegateRole.Utility,
    StakingV1: mpl_token_metadata_1.TokenDelegateRole.Staking,
};
const metadataDelegateRoleMap = {
    CollectionV1: mpl_token_metadata_1.MetadataDelegateRole.Collection,
    DataV1: mpl_token_metadata_1.MetadataDelegateRole.Data,
    ProgrammableConfigV1: mpl_token_metadata_1.MetadataDelegateRole.ProgrammableConfig,
};
const metadataDelegateSeedMap = {
    [mpl_token_metadata_1.MetadataDelegateRole.AuthorityItem]: 'authority_item_delegate',
    [mpl_token_metadata_1.MetadataDelegateRole.Collection]: 'collection_delegate',
    [mpl_token_metadata_1.MetadataDelegateRole.Use]: 'use_delegate',
    [mpl_token_metadata_1.MetadataDelegateRole.Data]: 'data_delegate',
    [mpl_token_metadata_1.MetadataDelegateRole.ProgrammableConfig]: 'programmable_config_delegate',
    [mpl_token_metadata_1.MetadataDelegateRole.DataItem]: 'data_item_delegate',
    [mpl_token_metadata_1.MetadataDelegateRole.CollectionItem]: 'collection_item_delegate',
    [mpl_token_metadata_1.MetadataDelegateRole.ProgrammableConfigItem]: 'prog_config_item_delegate',
};
const delegateCustomDataMap = {
    CollectionV1: false,
    DataV1: false,
    ProgrammableConfigV1: false,
    StandardV1: true,
    TransferV1: true,
    SaleV1: true,
    UtilityV1: true,
    StakingV1: true,
    LockedTransferV1: true,
};
const getTokenDelegateRole = (type) => {
    const role = tokenDelegateRoleMap[type];
    if (!role)
        throw new Error(`UnreachableCaseError: ${type}`);
    return role;
};
exports.getTokenDelegateRole = getTokenDelegateRole;
const getMetadataDelegateRole = (type) => {
    const role = metadataDelegateRoleMap[type];
    if (!role)
        throw new Error(`UnreachableCaseError: ${type}`);
    return role;
};
exports.getMetadataDelegateRole = getMetadataDelegateRole;
const getMetadataDelegateRoleSeed = (type) => {
    return metadataDelegateSeedMap[(0, exports.getMetadataDelegateRole)(type)];
};
exports.getMetadataDelegateRoleSeed = getMetadataDelegateRoleSeed;
const getDefaultDelegateArgs = (type) => {
    const hasCustomData = delegateCustomDataMap[type];
    if (hasCustomData === undefined)
        throw new Error(`UnreachableCaseError: ${type}`);
    if (hasCustomData)
        throw new Error(`DelegateRoleRequiredDataError: ${type}`);
    return { __kind: type };
};
exports.getDefaultDelegateArgs = getDefaultDelegateArgs;
//# sourceMappingURL=DelegateType.js.map