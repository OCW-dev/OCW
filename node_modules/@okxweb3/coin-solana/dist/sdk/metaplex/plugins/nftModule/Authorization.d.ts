import { AuthorityType, AuthorizationData } from '../../mpl-token-metadata';
import { MetadataDelegateInput, TokenDelegateInput } from './DelegateInput';
import { Signer, PublicKey, Program } from '../../types';
import { Option } from "../../utils";
export type TokenMetadataAuthority = TokenMetadataAuthorityMetadata | TokenMetadataAuthorityHolder | TokenMetadataAuthorityMetadataDelegate | TokenMetadataAuthorityTokenDelegate;
export type TokenMetadataAuthorityMetadata = {
    __kind: 'metadata';
    updateAuthority: Signer;
    token?: PublicKey;
};
export type TokenMetadataAuthorityMetadataDelegate = MetadataDelegateInput<Signer> & {
    __kind: 'metadataDelegate';
};
export type TokenMetadataAuthorityTokenDelegate = TokenDelegateInput<Signer> & {
    __kind: 'tokenDelegate';
};
export type TokenMetadataAuthorityHolder = {
    __kind: 'holder';
    owner: Signer;
    token: PublicKey;
};
export type TokenMetadataAuthorizationDetails = {
    rules: PublicKey;
    data?: AuthorizationData;
};
export type ParsedTokenMetadataAuthorization = {
    accounts: {
        authority: PublicKey;
        token?: PublicKey;
        approver?: PublicKey;
        delegateRecord?: PublicKey;
        authorizationRules?: PublicKey;
    };
    signers: Signer[];
    data: {
        authorityType: AuthorityType;
        authorizationData: Option<AuthorizationData>;
    };
};
export declare const parseTokenMetadataAuthorization: (input: {
    mint: PublicKey;
    authority: TokenMetadataAuthority;
    authorizationDetails?: TokenMetadataAuthorizationDetails;
    programs?: Program[];
}) => ParsedTokenMetadataAuthorization;
export declare const getSignerFromTokenMetadataAuthority: (authority: TokenMetadataAuthority | Signer) => Signer;
