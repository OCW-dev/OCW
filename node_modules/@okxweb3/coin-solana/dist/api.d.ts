import { web3 } from "./sdk";
import { TransactionInstruction } from './sdk/web3';
import { TokenStandard } from "./sdk/metaplex";
export declare function getNewAddress(privateKey: string): string;
export declare function validAddress(address: string): boolean;
export declare function createRawTransaction(payer: string, blockHash: string): web3.Transaction;
export declare function appendInstruction(transaction: web3.Transaction, ...instructions: web3.TransactionInstruction[]): Promise<void>;
export declare function signTransaction(rawTransaction: web3.Transaction, ...privateKey: string[]): Promise<string>;
export declare function appendTransferInstruction(transaction: web3.Transaction, fromAddress: string, toAddress: string, amount: number): Promise<void>;
export declare function appendTokenTransferInstruction(transaction: web3.Transaction, fromAddress: string, toAddress: string, mintAddress: string, amount: number, createAssociatedAddress: boolean, token2022?: boolean, decimal?: number): Promise<void>;
export declare function appendTokenMintToInstruction(transaction: web3.Transaction, payerAddress: string, toAddress: string, mintAddress: string, authorityAddress: string, amount: number, createAssociatedAddress: boolean, token2022?: boolean): Promise<void>;
export declare function appendTokenBurnInstruction(transaction: web3.Transaction, ownerAddress: string, targetAddress: string, mintAddress: string, amount: number, token2022?: boolean): Promise<void>;
export declare function signMessage(message: string, privateKey: string): Promise<string>;
export declare function deserializeMessages(messages: string[]): Promise<any>;
export declare function getHardwareTransaction(raw: string, pubKey: string, sig: string): Promise<string>;
export type TxData = {
    payer: string;
    blockHash: string;
    from: string;
    to: string;
    amount: number;
    mint?: string;
    createAssociatedAddress?: boolean;
    token2022?: boolean;
    computeUnitLimit?: number;
    computeUnitPrice?: number;
    needPriorityFee?: boolean;
};
export declare function getSerializedTransferVersionedTransaction(txData: TxData, ...privateKey: string[]): Promise<string>;
export declare function signTransferVersionedTransaction(txData: TxData, ...privateKey: string[]): Promise<string>;
export declare function signTokenTransferVersionedTransaction(txData: TxData, ...privateKey: string[]): Promise<string>;
export declare function getSerializedTokenTransferVersionedTransaction(txData: TxData, ...privateKey: string[]): Promise<string>;
export declare function getSerializedVersionedTransaction(payer: string, blockHash: string, instructions: TransactionInstruction[], privateKey: string[]): Promise<string>;
export declare function createAndSignVersionedTransaction(payer: string, blockHash: string, instructions: TransactionInstruction[], privateKey: string[]): Promise<string>;
export declare function signMplTransaction(payer: string, from: string, to: string, mint: string, blockHash: string, privateKey: string, tokenStandard?: TokenStandard, computeUnitLimit?: number, computeUnitPrice?: number): Promise<string>;
export declare function getSerializedMplTransaction(payer: string, from: string, to: string, mint: string, blockHash: string, privateKey: string, tokenStandard?: TokenStandard, computeUnitLimit?: number, computeUnitPrice?: number): Promise<string>;
export declare function validSignedTransaction(tx: string, version: boolean, skipCheckSig: boolean): web3.Transaction | web3.VersionedTransaction;
