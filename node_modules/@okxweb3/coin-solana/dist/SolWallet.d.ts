import { CalcTxHashParams, DerivePriKeyParams, GetDerivedPathParam, HardwareRawTransactionParam, NewAddressParams, SignTxParams, ValidAddressParams, ValidSignedTransactionParams, BaseWallet, ValidPrivateKeyParams } from '@okxweb3/coin-base';
export type TransactionType = "transfer" | "tokenTransfer" | "mplTransfer";
export type SolSignParam = {
    type: TransactionType;
    payer: string;
    blockHash: string;
    from: string;
    to: string;
    amount?: number;
    mint?: string;
    createAssociatedAddress?: boolean;
    version?: number;
    tokenStandard?: number;
    token2022?: boolean;
    decimal?: number;
    computeUnitLimit?: number;
    computeUnitPrice?: number;
    needPriorityFee?: boolean;
};
export type deserializeMessagesParams = {
    data: any[];
};
export declare class SolWallet extends BaseWallet {
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
    getRandomPrivateKey(): Promise<any>;
    getDerivedPrivateKey(param: DerivePriKeyParams): Promise<any>;
    checkPrivateKey(privateKey: string): boolean;
    getNewAddress(param: NewAddressParams): Promise<any>;
    validPrivateKey(param: ValidPrivateKeyParams): Promise<any>;
    validAddress(param: ValidAddressParams): Promise<any>;
    signTransaction(param: SignTxParams): Promise<any>;
    signMessage(param: SignTxParams): Promise<string>;
    deserializeMessages(param: deserializeMessagesParams): Promise<any>;
    getSerializedTransaction(param: SignTxParams): Promise<any>;
    calcTxHash(param: CalcTxHashParams): Promise<string>;
    getHardWareRawTransaction(param: SignTxParams): Promise<any>;
    getHardWareSignedTransaction(param: HardwareRawTransactionParam): Promise<any>;
    validSignedTransaction(param: ValidSignedTransactionParams): Promise<any>;
}
