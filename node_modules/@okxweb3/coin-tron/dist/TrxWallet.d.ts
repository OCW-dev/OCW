import { CalcTxHashParams, GetDerivedPathParam, NewAddressParams, SignTxParams, TypedMessage, ValidAddressParams, VerifyMessageParams, GetAddressParams, MpcRawTransactionParam, MpcTransactionParam, HardwareRawTransactionParam, ValidSignedTransactionParams, MpcMessageParam, BaseWallet, ValidPrivateKeyParams } from '@okxweb3/coin-base';
import * as tron from "./index";
export type TrxSignParam = {
    type: "transfer" | "assetTransfer" | "tokenTransfer";
    data: tron.TransferTransactionParams | tron.AssetTransferTransactionParams | tron.TokenTransferTransactionParams;
};
export declare class TrxWallet extends BaseWallet {
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
    static toHexAddress(address: string): string;
    static toBase58Address(hexAddress: string): string;
    getNewAddress(param: NewAddressParams): Promise<any>;
    validPrivateKey(param: ValidPrivateKeyParams): Promise<any>;
    validAddress(param: ValidAddressParams): Promise<any>;
    signTransaction(param: SignTxParams): Promise<any>;
    signMessage(param: SignTxParams): Promise<string>;
    static signRawTransaction(param: SignTxParams): Promise<string>;
    verifyMessage(param: VerifyMessageParams): Promise<boolean>;
    ecRecover(message: TypedMessage, signature: string): Promise<string>;
    getAddressByPublicKey(param: GetAddressParams): Promise<string>;
    getMPCRawTransaction(param: MpcRawTransactionParam): Promise<any>;
    getMPCTransaction(param: MpcTransactionParam): Promise<string>;
    getMPCRawMessage(param: MpcRawTransactionParam): Promise<any>;
    getMPCSignedMessage(param: MpcMessageParam): Promise<any>;
    calcTxHash(param: CalcTxHashParams): Promise<string>;
    getHardWareRawTransaction(param: SignTxParams): Promise<any>;
    getHardWareSignedTransaction(param: HardwareRawTransactionParam): Promise<any>;
    getHardWareMessageHash(param: SignTxParams): Promise<any>;
    validSignedTransaction(param: ValidSignedTransactionParams): Promise<any>;
}
