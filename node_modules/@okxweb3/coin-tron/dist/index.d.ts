/// <reference types="node" />
import { protocol } from './protobuf/tron';
export declare const HEX_ADDRESS_SIZE = 21;
export declare const ADDRESS_PREFIX_BYTE = 65;
export declare const ADDRESS_PREFIX = "41";
export type MessageType = "hex" | "legacy" | "protobuf" | "v2";
export declare function getPubKeyFromPriKey(priKeyBytes: Buffer): Buffer;
export declare function computeAddress(pubBytes: Buffer): Buffer;
export declare function addressFromPrivate(privateKeyHex: string): string;
export declare function addressFromPublic(publicKeyHex: string): string;
export declare function validateAddress(address: string): boolean;
export declare function toHexAddress(address: string): string;
export interface CommonTransactionParams {
    fromAddress: string;
    refBlockBytes: string;
    refBlockHash: string;
    expiration: number;
    timeStamp: number;
    feeLimit?: number;
}
export interface TransferTransactionParams extends CommonTransactionParams {
    toAddress: string;
    amount: string;
}
export interface AssetTransferTransactionParams extends TransferTransactionParams {
    assetName: string;
}
export interface TokenTransferTransactionParams extends TransferTransactionParams {
    contractAddress: string;
}
export declare function createRawTransaction(param: CommonTransactionParams, contractArray: protocol.Transaction.IContract[]): protocol.Transaction.raw;
export declare function signRawTransaction(raw: protocol.Transaction.raw, privateKey: string): string | {
    raw: string;
    hash: string;
};
export declare function getTxIdBySignedTx(signedTx: string): string;
export declare function transferContract(param: TransferTransactionParams): protocol.Transaction.Contract[];
export declare function transfer(param: TransferTransactionParams, privateKey: string): string | {
    raw: string;
    hash: string;
};
export declare function assetTransferContract(param: AssetTransferTransactionParams): protocol.Transaction.Contract[];
export declare function assetTransfer(param: AssetTransferTransactionParams, privateKey: string): string | {
    raw: string;
    hash: string;
};
export declare function getTransferData(param: TokenTransferTransactionParams): Buffer;
export declare function tokenTransferContract(param: TokenTransferTransactionParams): protocol.Transaction.Contract[];
export declare function tokenTransfer(param: TokenTransferTransactionParams, privateKey: string): string | {
    raw: string;
    hash: string;
};
export declare function signByTxId(txId: string, priKey: string): string;
export declare function signMessage(type: MessageType, message: string, priKey: string, useTronHeader?: boolean): string;
export declare function signMessage2(data: string, privateKey: string): string;
export declare function verifySignature(message: string, signature: string, useTronHeader?: boolean): string | null;
export declare function verifySignatureV2(message: string, signature: string, useTronHeader?: boolean): string | null;
export declare function getMPCTransaction(raw: string, sig: string, publicKey: string): string;
export declare function getUnsignedMessage(type: MessageType, message: string, useTronHeader?: boolean): string;
export declare function getMPCSignedMessage(hash: string, sig: string, publicKey: string, type: MessageType, message?: string): string | undefined;
export declare function getHardwareTransaction(raw: string, sig: string): string;
export declare function validSignedTransaction(tx: string, publicKey?: string): protocol.Transaction;
export * from "./TrxWallet";
